---
title: Introduction to Modeling
execute:
  echo: true
format:
  html:
    code-fold: true
    code-tools: true
    toc: true
    toc-title: Introduction to Modeling
    page-layout: full
    theme:
      - cosmo
      - cerulean
jupyter: python3
---

Up until this point in the semester, we've focused on analyzing datasets. We've looked into the early stages of the data science lifecycle, focusing on the programming tools, visualization techniques, and data cleaning methods needed for data analysis.

This lecture marks a shift in focus. We will move away from examining datasets to actually *using* our data to better understand the world. Specifically, the next sequence of lectures will explore predictive modeling: generating models to make some prediction about the world around us. In this lecture, we'll introduce the conceptual framework for setting up a modeling task. In the next few lectures, we'll put this framework into practice by implementing several kinds of models.

## The Modeling Process

At a high level, a model is some way of representing a system. In Data 100, we'll treat a model as some mathematical rule we use to describe the relationship between variables. 

What variables are we modeling? Typically, we use a subset of the variables in our sample of collected data to model another variable in this data. To put this more formally, say we have the following dataset $\mathbb{D}$:

$$\mathbb{D} = \{(x_1, y_1), (x_2, y_2), ..., (x_n, y_n)\}$$

Each pair of values $(x_i, y_i)$ represents a datapoint. In a modeling setting, we call these **observations**. $y_i$ is the dependent variable we are trying to model, also called an **output** or **response**. $x_i$ is the independent variable inputted into the model to make predictions, also known as a **feature**. 

Our goal in modeling is to use the observed data $\mathbb{D}$ to predict the output variable $y_i$. We denote each prediction as $\hat{y}_i$ (read: "y hat sub i").

How do we generate these predictions? Some examples of models we'll encounter in this class are given below:

* $\hat{y} = \theta$
* $\hat{y} = a + bx$
* $\hat{y} = \frac{1}{1+\exp(-x^{T}\theta)}$

The examples above are known as **parametric models**. They relate the collected data, $x$, to the prediction we make, $\hat{y}$. A few parameters ($\theta$, $a$, $b$) are used to describe the relationship between $x$ and $\hat{y}$.

Notice that we don't immediately know the values of these parameters. While the features, $x$, are taken from our observed data, we need to decide what values to give $\theta$, $a$, and $b$ ourselves. This is the heart of parametric modeling: *what parameter values should we choose so our model makes the best possible predictions?*

To choose our model parameters, we'll work through the **modeling process**. 

1. Choose a model: how should we represent the world?
2. Choose a loss function: how do we quantify prediction error?
3. Fit the model: how do we choose the best parameters of our model given our data?
4. Evaluate model performance: how do we evaluate whether this process gave rise to a good model?

## Choosing a Model

Our first step is choosing a model: defining the mathematical rule that describes the relationship between the features, $x$, and predictions $\hat{y}$. 

In Data 8, you learned about the **simple linear regression (SLR) model**. This model takes the form:
$$\hat{y} = a + bx$$

The parameters of the SLR model are $a$, the intercept term, and $b$, the slope term. To create an effective model, we want to choose values for $a$ and $b$ that most accurately predict the output variable. The "best" fitting model parameters are given the special names $\hat{a}$ and $\hat{b}$ â€“ they are the specific parameter values that allow our model to generate the best possible predictions.

In Data 8, you learned that the best SLR model parameters are:
$$\hat{a} = \bar{y} - \hat{b} \cdot \bar{x} \qquad \qquad \hat{b} = r \cdot \frac{\sigma_y}{\sigma_x}$$

A quick refresher on notation:

* $\bar{y}$ and $\bar{x}$ indicate the mean value of $y$ and $x$, respectively
* $\sigma_y$ and $\sigma_x$ indicate the standard deviations of $y$ and $x$
* $r$ is the correlation, defined as the average of the product of $x$ and $y$ measured in standard units: $\frac{1}{n} \sum_{i=1}^n (\frac{x_i-\bar{x}}{\sigma_x})(\frac{y_i-\bar{y}}{\sigma_y})$

In Data 100, we want to understand *how* to derive these best model coefficients. To do so, we'll introduce the concept of a loss function.

## Choosing a Loss Function

We've talked about the idea of creating the "best" possible predictions. This begs the question: how do we decide how "good" or "bad" our model's predictions are?

A **loss function** characterizes the cost, error, or fit resulting from a particular choice of model or model parameters. This function, $L(y, \hat{y})$, quantifies how "far off" a single prediction by our model is from a true, observed value in our collected data. 

The choice of loss function for a particular model depends on the modeling task at hand. Regardless of the specific function used, a loss function should follow two basic principles:

* If the prediction $\hat{y}$ is *close* to the actual value $y$, loss should be low
* If the prediction $\hat{y}$ is *far* from the actual value $y$, loss should be high

Two common choices of loss function are squared loss and absolute loss. 

**Squared loss**, also known as **L2 loss**, computes loss as the square of the difference between the observed $y$ and predicted $\hat{y}$:
$$L(y, \hat{y}) = (y - \hat{y})^2$$

**Absolute loss**, also known as **L1 loss**, computes loss as the absolute difference between the observed $y$ and predicted $\hat{y}$:
$$L(y, \hat{y}) = |y - \hat{y}|$$

L1 and L2 loss give us a tool for quantifying our model's performance on a single datapoint. This is a good start, but ideally we want to understand how our model performs across our *entire* dataset. A natural way to do this is to compute the average loss across all datapoints in the dataset. This is known as the **empirical risk**, $\hat{R}(\theta)$:
$$\hat{R}(\theta) = \frac{1}{n} \sum^n_{i=1} L(y_i, \hat{y}_i)$$

We can substitute our L1 and L2 loss into the empirical risk definition. The **mean squared error (MSE)** is the average squared loss across a dataset:
$$\text{MSE} = \frac{1}{n} \sum_{i=1}^n (y_i - \hat{y}_i)^2$$

The **mean absolute error (MAE)** is the average absolute loss across a dataset:
$$\text{MAE}= \frac{1}{n} \sum_{i=1}^n |y_i - \hat{y}_i|$$

## Fitting the Model

Now that we've established the concept of a loss function, we can return to our original goal of choosing model parameters. Specifically, we want to choose the best set of model parameters that will minimize the model's empirical risk on our dataset. This process is called fitting the model.

We know from calculus that a function is minimized when (1) its first derivative is equal to zero and (2) its second derivative is positive. We often call the function being minimized the **objective function** (our objective is to find its minimum).

To find the optimal model parameter, we:

1. Take the derivative of the empirical risk with respect to that parameter
2. Set the derivative equal to 0
3. Solve for the parameter

We repeat this process for each parameter present in the model. For now, we'll disregard the second derivative condition. 

To help us make sense of this process, let's put it into action by deriving the optimal model parameters for simple linear regression using the mean squared error as our empirical risk.

Step 1: take the derivative of empirical risk with respect to each model parameter. We substitute the SLR model, $\hat{y} = a+bx$, into the definition of MSE above and differentiate with respect to $a$ and $b$.
$$\text{MSE} = \frac{1}{n} \sum_{i=1}^{n} (y_i - \hat{y}_i)^2 = \frac{1}{n} \sum_{i=1}^{n} (y_i - a - bx_i)^2$$

$$\frac{\partial}{\partial a} \text{MSE} = \frac{-2}{n} \sum_{i=1}^{n} y_i - a - bx_i$$

$$\frac{\partial}{\partial b} \text{MSE} = \frac{-2}{n} \sum_{i=1}^{n} (y_i - a - bx_i)x_i$$

Step 2: set the derivatives equal to 0. After simplifying terms, this produces two **estimating equations**. The best set of model parameters $(a, b)$ *must* satisfy these two optimality conditions.
$$0 = \frac{-2}{n} \sum_{i=1}^{n} y_i - a - bx_i \Longleftrightarrow \frac{1}{n}\sum_{i=1}^{n} y_i - \hat{y}_i = 0$$
$$0 = \frac{-2}{n} \sum_{i=1}^{n} (y_i - a - bx_i)x_i \Longleftrightarrow \frac{1}{n}\sum_{i=1}^{n} (y_i - \hat{y}_i)x_i = 0$$

Step 3: solve the estimating equations to compute estimates for $\hat{a}$ and $\hat{b}$.

Taking the first equation gives the estimate of $\hat{a}$:
$$\begin{align}
\frac{1}{n} \sum_{i=1}^n y_i - \hat{a} - \hat{b}x_i &= 0 \\
\left(\frac{1}{n} \sum_{i=1}^n y_i \right) - \hat{a} - \hat{b}\left(\frac{1}{n} \sum_{i=1}^n x_i \right) &= 0 \\
\hat{a} &= \bar{y} - \hat{b} \bar{x}
\end{align}$$

With a bit more maneuvering, the second equation gives the estimate of $\hat{b}$. Start by multiplying the first estimating equation by $\bar{x}$, then subtracting the result from the second estimating equation.
$$\begin{align}
\frac{1}{n} \sum_{i=1}^n (y_i - \hat{y}_i)x_i - \frac{1}{n} \sum_{i=1}^n (y_i - \hat{y}_i)\bar{x} &= 0 \\
\frac{1}{n} \sum_{i=1}^n (y_i - \hat{y}_i)(x_i - \bar{x}) &= 0
\end{align}$$

Next, plug in $\hat{y} = \hat{a} + \hat{b}x = (\bar{y} - \hat{b} \bar{x}) + \hat{b}x = \bar{y} + \hat{b}(x - \bar{x})$:
$$\begin{align}
\frac{1}{n} \sum_{i=1}^n (y_i - \bar{y} - \hat{b}(x - \bar{x}))(x_i - \bar{x}) &= 0 \\
\frac{1}{n} \sum_{i=1}^n (y_i - \bar{y})(x_i - \bar{x}) = \hat{b} \times \frac{1}{n} \sum_{i=1}^n (x_i - \bar{x})^2
\end{align}$$

By using the definition of correlation $\left(r = \frac{1}{n} \sum_{i=1}^n (\frac{x_i-\bar{x}}{\sigma_x})(\frac{y_i-\bar{y}}{\sigma_y}) \right)$ and standard deviation $\left(\sigma_x = \sqrt{\frac{1}{n} \sum_{i=1}^n (x_i - \bar{x})^2} \right)$, we can conclude:
$$r \sigma_x \sigma_y = \hat{b} \times \sigma_x^2$$
$$\hat{b} = r \frac{\sigma_y}{\sigma_x}$$

Just as was given in Data 8! 

Remember, this derivation found the optimal model parameters for SLR when using MSE risk. If we had used a different model or different loss function, we likely would have found different values for the best model parameters. However, regardless of the model and loss used, we can *always* follow these three steps to fit the model.

## Evaluating Performance

At this point, we've:

* Defined our model
* Defined our loss function
* Fit the model to identify the best model parameters

This leaves us with one final question â€“ how "good" are the predictions made by this "best" fitted model? 



### [TODO: Rework using Lecture 10 content]

There are a few ways to evaluate a model's performance. 

1. Compute statistics: find the mean and standard deviation of all predicted values. If these are similar to the mean and standard deviation of the original observed $y$s, the model is likely performing well.
2. Compute performance metrics: the root mean squared error (RMSE) is the square root of MSE. Taking the square root converts the value back into the original units of $y$, which is useful for understanding the model's performance. A low RMSE indicates more "accurate" predictions â€“ that there is lower average loss across the dataset.
$$\text{RMSE} = \sqrt{\frac{1}{n} \sum_{i=1}^n (y_i - \hat{y}_i)^2}$$
3. Visualization: generate a plot of the model's residuals, defined as the difference between the observed and predicted $y$ value ($e_i = y_i - \hat{y}_i$). This gives a high-level view of how "off" each prediction is from the true observed value.


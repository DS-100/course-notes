{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Parameter Inference and Bootstrapping (from Spring 2025)\n",
        "execute:\n",
        "  echo: true\n",
        "format:\n",
        "  html:\n",
        "    code-fold: true\n",
        "    code-tools: true\n",
        "    toc: true\n",
        "    toc-title: Parameter Inference and Bootstrapping\n",
        "    page-layout: full\n",
        "    theme:\n",
        "      - cosmo\n",
        "      - cerulean\n",
        "    callout-icon: false\n",
        "jupyter:\n",
        "  jupytext:\n",
        "    text_representation:\n",
        "      extension: .qmd\n",
        "      format_name: quarto\n",
        "      format_version: '1.0'\n",
        "      jupytext_version: 1.16.1\n",
        "  kernelspec:\n",
        "    display_name: Python 3 (ipykernel)\n",
        "    language: python\n",
        "    name: python3\n",
        "---\n",
        "\n",
        "<!-- \n",
        "The **bias** of an estimator is how far off it is from the parameter, on average.\n",
        "\n",
        "$$\\begin{align}\\text{Bias}(\\hat{\\theta}) = \\mathbb{E}[\\hat{\\theta} - \\theta] = \\mathbb{E}[\\hat{\\theta}] - \\theta\\end{align}$$\n",
        "\n",
        "For example, the bias of the sample mean as an estimator of the population mean is:\n",
        "\n",
        "$$\\begin{align}\\mathbb{E}[\\bar{X}_n - \\mu]\n",
        "&= \\mathbb{E}[\\frac{1}{n}\\sum_{i=1}^n (X_i)] - \\mu \\\\\n",
        "&= \\frac{1}{n}\\sum_{i=1}^n \\mathbb{E}[X_i] - \\mu \\\\\n",
        "&= \\frac{1}{n} (n\\mu) - \\mu \\\\\n",
        "&= 0\\end{align}$$\n",
        "\n",
        "Because its bias is equal to 0, the sample mean is said to be an **unbiased** estimator of the population mean.\n",
        "\n",
        "The **variance** of an estimator is a measure of how much the estimator tends to vary from its mean value.\n",
        "\n",
        "$$\\begin{align}\\text{Var}(\\hat{\\theta}) = \\mathbb{E}\\left[(\\hat{\\theta} - \\mathbb{E}[\\hat{\\theta}])^2 \\right]\\end{align}$$\n",
        "\n",
        "The **mean squared error** measures the \"goodness\" of an estimator by incorporating both the bias and variance. Formally, it is defined as:\n",
        "\n",
        "$$\\begin{align}\\text{MSE}(\\hat{\\theta}) = \\mathbb{E}\\left[(\\hat{\\theta} - \\theta)^2\n",
        "\\right]\\end{align}$$ -->\n",
        "\n",
        "\n",
        "::: {.callout-note collapse=\"false\"}\n",
        "## Learning Outcomes\n",
        "* Construct confidence intervals for hypothesis testing using bootstrapping\n",
        "* Understand the assumptions we make and their impact on our regression inference\n",
        "* Explore ways to overcome issues of multicollinearity\n",
        "* Compare regression correlation and causation\n",
        ":::\n",
        "\n",
        "Last time, we introduced the idea of random variables and how they affect the data and model we construct.\n",
        "We also demonstrated the decomposition of model risk from a fitted model and dived into the bias-variance tradeoff.\n",
        "\n",
        "In this lecture, we will explore regression inference via hypothesis testing, understand how to use bootstrapping under the right assumptions, and consider the environment of understanding causality in theory and in practice.\n",
        "\n",
        "\n",
        "## Review: Bootstrap Resampling\n",
        "### Example: Average Height of UC Berkeley Undegraduates\n",
        "To determine the properties (e.g., variance) of the sampling distribution of an estimator, we’d need access to the population. Ideally, we'd want to consider all possible samples in the population, compute an estimate for each sample, and study the distribution of those estimates.\n",
        "\n",
        "<p align=\"center\">\n",
        "<img src=\"images/population_samples.png\" alt='y_hat' width='650'>\n",
        "</p>\n",
        "\n",
        "However, this can be quite expensive and time-consuming. Even more importantly, we don’t have access to the population \n",
        "— we only have ***one* random sample from the population**. How can we consider all possible samples if we only have one?\n",
        "\n",
        "Bootstrapping comes in handy here! With bootstrapping, we treat our random sample as a \"population\" and resample from it *with replacement*. Intuitively, a random sample is representative of the population (if it is big enough), so **sampling from our sample** approximates **sampling from the population**. When sampling, there are a couple things to keep in mind:\n",
        "\n",
        "* We need to sample the same way we constructed the original sample. Typically, this involves taking a simple random sample **with replacement**.\n",
        "* New samples **must be the same size** as the original sample. We need to accurately model the variability of our estimates.\n",
        "\n",
        "As Professor Grossman noted, we are essentially creating \"parallel universes\" via bootstrapping the sample.\n",
        "\n",
        "::: {.callout-caution collapse=\"true\"}\n",
        "### Why must we resample *with replacement*?\n",
        "Given an original sample of size $n$, we want a resample that has the same size $n$ as the original. Sampling *without* replacement will give us the original sample with shuffled rows. Hence, when we calculate summary statistics like the average, our sample *without* replacement will always have the same average as the original sample, defeating the purpose of a bootstrap.\n",
        ":::\n",
        "\n",
        "<p align=\"center\">\n",
        "<img src=\"images/bootstrap.png\" alt='y_hat' width='700'>\n",
        "</p>\n",
        "\n",
        "Bootstrap resampling is a technique for estimating the sampling distribution of an estimator. \n",
        "Here are the steps of bootstrapping written out:\n",
        "\n",
        "0. Assume that your random sample of size $n$ is representative of the true population.\n",
        "1. To mimic a random draw of size $n$ from the true population, randomly resample $n$ observations **with replacement** from your random sample. Call this a \"synthetic\" random sample.\n",
        "2. To compute a synthetic \"best guess\", calculate the sample statistic using your synthetic random sample. For example, you could calculate the sample average.\n",
        "3. Repeat steps 1 and 2 many times. A common choice is 10,000 times.\n",
        "4. The distribution of the 10,000 synthetic \"best guesses\" provide a sense of uncertainty around your original \"best guess\".\n",
        "\n",
        "From here, we can construct a 95% confidence interval by taking the 2.5% and (100 - 2.5)% percentiles of our bootstrapped thetas.\n",
        "\n",
        "\n",
        "How well does bootstrapping actually represent our population? The bootstrapped sampling distribution of an estimator does not exactly match the sampling distribution of that estimator, but it is often close. Similarly, the variance of the bootstrapped distribution is often close to the true variance of the estimator. The example below displays the results of different bootstraps from a *known* population using a sample size of $n=50$.\n",
        "\n",
        "<p align=\"center\">\n",
        "<img src=\"images/bootstrapped_samples.png\" alt='y_hat' width='600' height='700'>\n",
        "</p>\n",
        "\n",
        "In the real world, we don't know the population distribution. The center of the bootstrapped distribution is the estimator applied to our original sample, so we have no way of understanding the estimator's true expected value; the **center and spread of our bootstrap are *approximations***. The bootstrap **does not improve our estimate**. The quality of our bootstrapped distribution also depends on the quality of our original sample. If our original sample was not representative of the population (like Sample 5 in the image above), then the bootstrap is next to useless.\n",
        "\n",
        "::: {.callout-note collapse=\"false\"}\n",
        "### Bootstrap limitations\n",
        "In general, bootstrapping works better for *large samples*, when the population distribution is *not heavily skewed* (no outliers), and when the estimator is *“low variance”* (insensitive to extreme values).\n",
        ":::\n",
        "\n",
        "\n",
        "### Example: Bootstrapping a Regression Coefficient\n",
        "To get a better idea of how bootstrapping works in practice, let's walk through a simple example of bootstrapping to estimate the relationship between miles per gallon and the weight of a vehicle. We observe this SLR model:\n",
        "$$ \n",
        "\\widehat{\\text{mpg}} = \\hat{\\theta}_0 + \\hat{\\theta}_1 * \\text{weight}\n",
        "$$\n",
        "\n",
        "Suppose we collected a sample of 20 cars from a population. For the purposes of this demo, we will assume that the `seaborn`'s `mpg` dataset represents the entire population. The following is a visualization of our sample:"
      ],
      "id": "9af756aa"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import plotly.express as px\n",
        "import sklearn.linear_model as lm\n",
        "import seaborn as sns\n",
        "\n",
        "np.random.seed(42)\n",
        "sample_size = 100\n",
        "mpg = sns.load_dataset('mpg')\n",
        "print(\"Full Data Size:\", len(mpg))\n",
        "mpg_sample = mpg.sample(sample_size)\n",
        "print(\"Sample Size:\", len(mpg_sample))\n",
        "px.scatter(mpg_sample, x='weight', y='mpg', trendline='ols', width=800)"
      ],
      "id": "7eeb76ae",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Fitting a linear model, we get an estimate of the slope $\\hat{\\theta}_1$:"
      ],
      "id": "78cac1ec"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "model = lm.LinearRegression().fit(mpg_sample[['weight']], mpg_sample['mpg'])\n",
        "model.coef_[0] "
      ],
      "id": "582558d1",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Bootstrap Implementation\n",
        "We can use bootstrapping to estimate the distribution of that coefficient. Here we construct a bootstrap function that takes an estimator function and uses that function to construct many bootstrap estimates of the slope."
      ],
      "id": "3772525b"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "def estimator(sample):\n",
        "    \"\"\"\n",
        "    Fits an SLR to `sample` regressing mpg on weight, \n",
        "    and returns the slope of the fitted line\n",
        "    \"\"\"\n",
        "    model = lm.LinearRegression().fit(sample[['weight']], sample['mpg'])\n",
        "    return model.coef_[0]"
      ],
      "id": "4251fc11",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "The code below uses `df.sample` [(documentation)](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sample.html) to generate a bootstrap sample that is the same size as the original sample."
      ],
      "id": "c30f2b52"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "def bootstrap(sample, statistic, num_repetitions):\n",
        "    \"\"\"\n",
        "    Returns the statistic computed on a num_repetitions  \n",
        "    bootstrap samples from sample.\n",
        "    \"\"\"\n",
        "    stats = []\n",
        "    for i in np.arange(num_repetitions):\n",
        "        # Step 1: Resample with replacement from our original sample to generate\n",
        "        # a synthetic sample of the same size\n",
        "        bootstrap_sample = sample.sample(frac=1, replace=True)\n",
        "        \n",
        "        # Step 2: Calculate a synthetic estimate using the synthetic sample\n",
        "        bootstrap_stat = statistic(bootstrap_sample)\n",
        "        \n",
        "        # Append the synthetic estimate to the list of estimates\n",
        "        stats.append(bootstrap_stat)\n",
        "    return stats   "
      ],
      "id": "a1cc7205",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "After constructing many bootstrap slope estimates (in this case, 10,000), we can visualize the distribution of these estimates."
      ],
      "id": "0fbb6fea"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "#Construct 10,000 bootstrap slope estimates\n",
        "bs_thetas = bootstrap(mpg_sample, estimator, 10000)\n",
        "\n",
        "#Visualize the distribution of these estimates\n",
        "px.histogram(bs_thetas, title='Bootstrap Distribution of the Slope', \n",
        "             width=800)"
      ],
      "id": "f713f045",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Computing a Bootstrap CI\n",
        "We can now compute the confidence interval for the slopes using the percentiles of the empirical distribution. Here, we are looking for a 95% confidence interval, so we want values at the 2.5 and 97.5 percentiles of the bootstrap samples to be the bounds of our interval. To find the interval, we can use the function defined below."
      ],
      "id": "94d2978c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "def bootstrap_ci(bootstrap_samples, confidence_level=95):\n",
        "    \"\"\"\n",
        "    Returns the confidence interval for the bootstrap samples.\n",
        "    \"\"\"\n",
        "    lower_percentile = (100 - confidence_level) / 2\n",
        "    upper_percentile = 100 - lower_percentile\n",
        "    return np.percentile(bootstrap_samples, [lower_percentile, upper_percentile])\n",
        "print(bootstrap_ci(bs_thetas))"
      ],
      "id": "89838978",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "#### Comparing to the Population CIs\n",
        "In practice, you don't have access to the population. In this example, we took a sample from a larger dataset that we can treat as the population. Let's compare our results to what they would be if we had resampled from the larger dataset. Here is the 95% confidence interval for the slope when sampling 10,000 times from the entire dataset:"
      ],
      "id": "30e65cd0"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "mpg_pop = sns.load_dataset('mpg')\n",
        "theta_est = [estimator(mpg_pop.sample(20)) for i in range(10000)]\n",
        "print(bootstrap_ci(theta_est))"
      ],
      "id": "7f00df75",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Visualizing the two distributions:"
      ],
      "id": "24a8f4fd"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "thetas = pd.DataFrame({\"bs_thetas\": bs_thetas, \"thetas\": theta_est})\n",
        "px.histogram(thetas.melt(), x='value', facet_row='variable', \n",
        "             title='Distribution of the Slope', width=800)"
      ],
      "id": "70a5a13f",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Although our bootstrapped sample distribution does not exactly match the sampling distribution of the population, we can see that it is relatively close. This demonstrates the benefit of bootstrapping — without knowing the actual population distribution, we can still roughly approximate the true slope for the model by using only a single random sample of 20 cars.\n",
        "\n",
        "\n",
        "<!-- #### PurpleAir (chose to skip this section because it's too complex for the amount of pedagogical value it adds)\n",
        "To show an example of this hypothesis testing process, we'll work with air quality measurement data. There are 2 common sources of air quality information: Air Quality System (AQS) and [PurpleAir sensors](https://www2.purpleair.com/). AQS is seen as the gold standard because it is high quality, well-calibrated, and publicly available. However, it is very expensive, and the sensors are far apart; reports are also delayed due to extensive calibration.  \n",
        "\n",
        "On the other hand, PurpleAir (PA) sensors are much cheaper, easier to install, and has denser coverage (measurements are taken every 2 minutes). Unfortunately, its measurements are much less accurate than AQS. \n",
        "\n",
        "For this demo, our goal is to use AQS sensor measurements to improve PurpleAir measurements by training a model that adjusts PA measurements based on AQS measurements\n",
        "\n",
        "$$PA \\approx \\theta_0 + \\theta_1 AQS$$\n",
        "\n",
        "Using this approximation, we'll invert the model to predict the true air quality from PA measurements\n",
        "$$ \\text{True Air Quality } \\approx -\\frac{\\theta_0}{\\theta_1} + \\frac{1}{\\theta_1} PA$$\n",
        "\n",
        "::: {.callout-tip collapse=\"false\"}\n",
        "### Inverse Model Derivation \n",
        "Intuitively, AQS measurements are very accurate, so we can treat AQS as the true air quality: \n",
        "$AQS = \\text{True Air Quality}$\n",
        "\n",
        "$$\n",
        "\\begin{align}\n",
        "PA &\\approx \\theta_0 + \\theta_1 AQS \\\\\n",
        "&\\approx \\theta_0 + \\theta_1 \\text{True Air Quality} \\\\\n",
        "PA - \\theta_0 &\\approx + \\theta_1 \\text{True Air Quality} \\\\\n",
        "\\frac{PA - \\theta_0}{\\theta_1} &\\approx \\text{True Air Quality} \\\\\n",
        "\\text{True Air Quality } &\\approx -\\frac{\\theta_0}{\\theta_1} + \\frac{1}{\\theta_1} PA \n",
        "\\end{align}\n",
        "$$\n",
        ":::\n",
        "\n",
        "#| code-fold: true\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import sklearn.linear_model as lm\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# big font helper\n",
        "def adjust_fontsize(size=None):\n",
        "    SMALL_SIZE = 8\n",
        "    MEDIUM_SIZE = 10\n",
        "    BIGGER_SIZE = 12\n",
        "    if size != None:\n",
        "        SMALL_SIZE = MEDIUM_SIZE = BIGGER_SIZE = size\n",
        "\n",
        "    plt.rc('font', size=SMALL_SIZE)          # controls default text sizes\n",
        "    plt.rc('axes', titlesize=SMALL_SIZE)     # fontsize of the axes title\n",
        "    plt.rc('axes', labelsize=MEDIUM_SIZE)    # fontsize of the x and y labels\n",
        "    plt.rc('xtick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\n",
        "    plt.rc('ytick', labelsize=SMALL_SIZE)    # fontsize of the tick labels\n",
        "    plt.rc('legend', fontsize=SMALL_SIZE)    # legend fontsize\n",
        "    plt.rc('figure', titlesize=BIGGER_SIZE)  # fontsize of the figure title\n",
        "\n",
        "plt.style.use('fivethirtyeight')\n",
        "sns.set_context(\"talk\")\n",
        "sns.set_theme()\n",
        "#plt.style.use('default') # revert style to default mpl\n",
        "adjust_fontsize(size=20)\n",
        "%matplotlib inline\n",
        "csv_file = 'data/Full24hrdataset.csv'\n",
        "usecols = ['Date', 'ID', 'region', 'PM25FM', 'PM25cf1', 'TempC', 'RH', 'Dewpoint']\n",
        "full_df = (pd.read_csv(csv_file, usecols=usecols, parse_dates=['Date'])\n",
        "        .dropna())\n",
        "full_df.columns = ['date', 'id', 'region', 'pm25aqs', 'pm25pa', 'temp', 'rh', 'dew']\n",
        "full_df = full_df.loc[(full_df['pm25aqs'] < 50)]\n",
        "\n",
        "\n",
        "bad_dates = ['2019-08-21', '2019-08-22', '2019-09-24']\n",
        "GA = full_df.loc[(full_df['id'] == 'GA1') & (~full_df['date'].isin(bad_dates)) , :]\n",
        "AQS, PA = GA[['pm25aqs']], GA['pm25pa']\n",
        "AQS.head()\n",
        "pd.DataFrame(PA).head()\n",
        "-->\n",
        "\n",
        "## Prediction vs Inference\n",
        "\n",
        "<!-- ### Correlation vs. Causation\n",
        "Let us consider some questions in an arbitrary regression problem. \n",
        "\n",
        "What does $\\theta_{j}$ mean in our regression?\n",
        "\n",
        "* Holding other variables fixed, how much should our prediction change with $X_{j}$?\n",
        "\n",
        "For simple linear regression, this boils down to the correlation coefficient\n",
        "\n",
        "* Does having more $x$ predict more $y$ (and by how much)? -->\n",
        "\n",
        "The difference between prediction vs inference is best illustrated through examples. \n",
        "\n",
        "1. **Prediction**: using our model to make **accurate predictions** about unseen data. Goal: get $\\hat{Y}$ close to $Y$.\n",
        "    - How much will the stock market go up tomorrow?\n",
        "    - Is this credit card charge fraudulent?\n",
        "    - Can my phone accurately detect my face?\n",
        "\n",
        "2. **Inference**: using our model to **study underlying relationships** between our features and response. Goal: how and why does $X$ relate to $Y$?\n",
        "    - What is the *effect* of getting a college degree on life outcomes?\n",
        "    - What is the *effect* of a drug?\n",
        "    - How does raising the minimum wage *affect* the unemployment rate?\n",
        "\n",
        "There can be overlap between prediction and inference problems, too.\n",
        "For example, a credit card agency builds a model to accurately **predict** credit scores. A customer might want to know **why** their credit score is lower than expected.\n",
        "\n",
        "Inference is closely associated with both correlation and causality.\n",
        "\n",
        "- **Correlational inference**\n",
        "    - Are homes with granite countertops worth more money?\n",
        "    - Do people with college degrees have higher lifetime earning?\n",
        "    - Are people who smoke more likely to get cancer?\n",
        "- **Causal inference** (harder!)\n",
        "    - How much do granite countertops *raise* the value of a house?\n",
        "    - Does getting a college degree *increase* lifetime earnings?\n",
        "    - Does smoking *cause* cancer?\n",
        "\n",
        "Questions about **causality** are about the **effects** of **interventions** (not just passive observation).\n",
        "\n",
        "Note, however, that regression coefficients are sometimes called “effects”, which can be deceptive!\n",
        "\n",
        "::: {.callout-tip collapse=\"false\"}\n",
        "\n",
        "When using data alone, **predictive questions** (i.e., are breastfed babies healthier?) can be answered, but **causal questions** (i.e., does breastfeeding improve babies’ health?) cannot. The reason for this is that there are many possible causes for our predictive question. For example, possible explanations for why breastfed babies are healthier on average include:\n",
        "\n",
        "* **Causal effect:** breastfeeding makes babies healthier\n",
        "* **Reverse causality:** healthier babies more likely to successfully breastfeed\n",
        "* **Common cause:** healthier / richer parents have healthier babies and are more likely to breastfeed\n",
        "\n",
        "We cannot tell which explanations are true (or to what extent) just by observing ($x$,$y$) pairs. Additionally, causal questions implicitly involve **counterfactuals**, events that didn't happen. \n",
        "\n",
        ":::\n",
        "\n",
        "## Regression Inference\n",
        "\n",
        "Let's solve correlational inference problem as a regression task.\n",
        "Suppose we have a dataset of lifetime earnings and college degree status.\n",
        "\n",
        "The correlational relationship between earnings and degrees can be written as a regression:\n",
        "$$\n",
        "\\widehat{\\text{Earnings}} = \\hat{\\theta}_0 + \\hat{\\theta}_1 (\\text{Has college degree})\n",
        "$$\n",
        "\n",
        "- $\\hat{\\theta}_0$: What are the predicted lifetime earnings for someone **without** a college degree?\n",
        "- $\\hat{\\theta}_1$: How much higher are predicted earnings for someone **with** a degree, *relative* to someone without a degree?\n",
        "\n",
        "As it turns out, $\\hat{\\theta}_1 >> 0$. Do we now have strong evidence that getting a college degree increases lifetime earnings? **No.**\n",
        "\n",
        "People with college degrees may just be more likely to have other traits that increase lifetime earnings, like family wealth.\n",
        "\n",
        "- There could be other **observed** confounders, like health, demographics, and geography.\n",
        "- There could also be **unobserved** confounders, like intrinsic motivation and values. We cannot be certain we've isolated the causal effect!\n",
        "\n",
        "::: {.callout-note collapse=\"false\"}\n",
        "\n",
        "### Confounding factor\n",
        "Let T represent a treatment (for example, alcohol use) and Y represent an outcome (for example, lung cancer).\n",
        "\n",
        "<img src=\"images/confounder.png\" alt='confounder' width='600'>\n",
        "\n",
        "A **confounder** is a variable that affects both T and Y, distorting the correlation between them. Using the example above, rich parents could be a confounder for breastfeeding and a baby's health. Confounders can be a measured covariate (a feature) or an unmeasured variable we don’t know about, and they generally cause problems, as the relationship between T and Y is affected by data we cannot see. We commonly *assume that all confounders are observed and adjusted for* (this is also called **ignorability**).\n",
        "\n",
        ":::\n",
        "\n",
        "## Collinearity\n",
        "\n",
        "Adding new terms to a regularized model often improves *predictive* performance.\n",
        "\n",
        "So, as long as we're at it, let's add another variable to our lifetime earnings regression:\n",
        "$$\n",
        "\\widehat{\\text{Earnings}} = \\hat{\\theta}_0 + \\hat{\\theta}_1 (\\text{Has college degree}) + \\hat{\\theta}_2 (\\text{Family wealth in dollars}) +  \\hat{\\theta}_3 (\\text{Has lived in a college town})\n",
        "$$\n",
        "\n",
        "Is adding this term appropriate if we want to make *inferences* about $\\hat{\\theta}_1$? **Probably not.**\n",
        "\n",
        "- Having a college degree and living in a college town are **very highly correlated** features. To the regression model, these features look very similar!\n",
        "\n",
        "- The regression model does not know that a college degree is more likely to change earnings than living in a college town. This is causal domain knowledge.\n",
        "\n",
        "- The fitting process of OLS minimizes RMSE (i.e., it maximizes predictive performance).\n",
        "\n",
        "- Because degree-status and living in a college town tend to have the same value, we could increase $\\hat{\\theta}_1$ by $\\$X$ and decrease $\\hat{\\theta}_3$ by $\\$X$ without changing the RMSE all that much.\n",
        "\n",
        "- So, the $\\hat{\\theta}_1$ and $\\hat{\\theta}_3$ coefficients will be sensitive to the training data (i.e., high variance).\n",
        "\n",
        "- This high variance does not harm *predictive* performance, but it does harm the *validity* of $\\hat{\\theta}_1$ as a measure of the association between college degrees and lifetime earnings.\n",
        "\n",
        "In general, if you want to make inferences about a parameter, don't include features that are highly correlated with that parameter's feature.\n",
        "\n",
        "## [Bonus Content]\n",
        "\n",
        "### How to perform causal inference?\n",
        "\n",
        "In a **randomized experiment**, participants are randomly assigned into two groups: treatment and control. A treatment is applied *only* to the treatment group. We assume ignorability and gather as many measurements as possible so that we can compare them between the control and treatment groups to determine whether or not the treatment has a true effect or is just a confounding factor. \n",
        "\n",
        "<img src=\"images/experiment.png\" alt='experiment' width='600'>\n",
        "\n",
        "However, often, randomly assigning treatments is impractical or unethical. For example, assigning a treatment of cigarettes to test the effect of smoking on the lungs would not only be impractical but also unethical.\n",
        "\n",
        "An alternative to bypass this issue is to utilize **observational studies**. This can be done by obtaining two participant groups separated based on some identified treatment variable. Unlike randomized experiments, however, we cannot assume ignorability here: the participants could have separated into two groups based on other covariates! In addition, there could also be unmeasured confounders.\n",
        "\n",
        "<img src=\"images/observational.png\" alt='observational' width='600'>\n",
        "\n",
        "<!-- ## Parameter Inference: Interpreting Regression Coefficients\n",
        "\n",
        "\n",
        "Recall the framework we established in the last lecture. The relationship between datapoints is given by $Y = g(x) + \\epsilon$, where $g(x)$ is the *true underlying relationship*, and $\\epsilon$ represents randomness. If we assume $g(x)$ is linear, we can express this relationship in terms of the unknown, true model parameters $\\theta$.\n",
        "\n",
        "$$f_{\\theta}(x) = g(x) + \\epsilon = \\theta_0 + \\theta_1 x_1 + \\ldots + \\theta_p x_p + \\epsilon$$\n",
        "\n",
        "Our model attempts to estimate each **true** and **unobserved population parameter** $\\theta_i$ using the sample estimates $\\hat{\\theta}_i$ calculated from the design matrix $\\Bbb{X}$ and response vector $\\Bbb{Y}$.\n",
        "\n",
        "$$f_{\\hat{\\theta}}(x) = \\hat{\\theta}_0 + \\hat{\\theta}_1 x_1 + \\ldots + \\hat{\\theta}_p x_p$$\n",
        "\n",
        "Let's pause for a moment. At this point, we're very used to working with the idea of a model parameter. But what exactly does each coefficient $\\theta_i$ actually *mean*? We can think of each $\\theta_i$ as a *slope* of the linear model. If all other variables are held constant, a unit change in $x_i$ will result in a $\\theta_i$ change in $f_{\\theta}(x)$. Broadly speaking, a large value of $\\theta_i$ means that the feature $x_i$ has a large effect on the response; conversely, a small value of $\\theta_i$ means that $x_i$ has little effect on the response. In the extreme case, if the true parameter $\\theta_i$ is 0, then the feature $x_i$ has **no effect** on $Y(x)$. \n",
        "\n",
        "If the true parameter $\\theta_i$ for a particular feature is 0, this tells us something pretty significant about the world: there is no underlying relationship between $x_i$ and $Y(x)$! But how can we test if a parameter is actually 0? As a baseline, we go through our usual process of drawing a sample, using this data to fit a model, and computing an estimate $\\hat{\\theta}_i$. However, we also need to consider that if our random sample comes out differently, we may find a different result for $\\hat{\\theta}_i$. To infer if the **true parameter** $\\theta_i$ is 0, we want to draw our conclusion from the distribution of $\\hat{\\theta}_i$ estimates we could have drawn across all other random samples. This is where [hypothesis testing](https://inferentialthinking.com/chapters/11/Testing_Hypotheses.html) comes in handy! \n",
        "\n",
        "To test if the true parameter $\\theta_i$ is 0, we construct a **hypothesis test** where our **null hypothesis** states that the true parameter $\\theta_i$ is 0, and the **alternative hypothesis** states that the true parameter $\\theta_i$ is *not* 0. We can now use **confidence intervals to test the hypothesis**:\n",
        "\n",
        "* Compute an approximate 95% confidence interval\n",
        "* If the interval does not contain 0, reject the null hypothesis at the 5% level.\n",
        "* Otherwise, data are consistent with null hypothesis (the true parameter *could* be 0).\n",
        "\n",
        "<p align=\"center\">\n",
        "<img src=\"images/confidence_interval.png\" alt='confidence_interval' width='650'>\n",
        "</p>\n",
        "\n",
        "For example, the 95% confidence interval shown above contains 0, so we cannot reject the null hypothesis. As a result, the true value of the population parameter $\\theta$ could be 0. -->\n",
        "\n",
        "### Hypothesis Testing Through Bootstrap\n",
        "\n",
        "We looked at a simple example of bootstrapping earlier, but now, let's use bootstrapping to perform hypothesis testing. Recall that we use bootstrapping to compute approximate 95% confidence intervals for each $\\theta_i$. If the interval doesn't contain 0, we reject the null hypothesis at the p=5% level. Otherwise, the data is consistent with the null, as the true parameter *could possibly* be 0.\n",
        "\n",
        "To show an example of this hypothesis testing process, we'll work with the [snowy plover](https://www.audubon.org/field-guide/bird/snowy-plover) dataset throughout this section. The data are about the eggs and newly hatched chicks of the Snowy Plover. The data were collected at the Point Reyes National Seashore by a former [student at Berkeley](https://openlibrary.org/books/OL2038693M/BLSS_the_Berkeley_interactive_statistical_system). Here's a [parent bird and some eggs](http://cescos.fau.edu/jay/eps/articles/snowyplover.html).\n",
        "\n",
        "<p align=\"center\">\n",
        "<img src=\"images/plover_eggs.jpg\" alt='bvt' width='550'>\n",
        "</p>\n",
        "\n",
        "Note that `Egg Length` and `Egg Breadth` (widest diameter) are measured in millimeters, and `Egg Weight` and `Bird Weight` are measured in grams. For reference, a standard paper clip weighs about one gram."
      ],
      "id": "f6a782c3"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import pandas as pd\n",
        "eggs = pd.read_csv(\"data/snowy_plover.csv\")\n",
        "eggs.head(5)"
      ],
      "id": "931717e7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Our goal will be to predict the weight of a newborn plover chick, which we assume follows the true relationship $Y = f_{\\theta}(x)$ below.\n",
        "\n",
        "$$\\text{bird\\_weight} = \\theta_0 + \\theta_1 \\text{egg\\_weight} + \\theta_2 \\text{egg\\_length} + \\theta_3 \\text{egg\\_breadth} + \\epsilon$$\n",
        "\n",
        "Note that for each $i$, the parameter $\\theta_i$ is a fixed number, but it is unobservable. We can only estimate it. The random error $\\epsilon$ is also unobservable, but it is assumed to have expectation 0 and be independent and identically distributed across eggs.\n",
        "\n",
        "Say we wish to determine if the `egg_weight` impacts the `bird_weight` of a chick – we want to infer if $\\theta_1$ is equal to 0.\n",
        "\n",
        "First, we define our hypotheses:\n",
        "\n",
        "* **Null hypothesis**: the true parameter $\\theta_1$ is 0; any variation is due to random chance.\n",
        "* **Alternative hypothesis**: the true parameter $\\theta_1$ is not 0.\n",
        "\n",
        "Next, we use our data to fit a model $\\hat{Y} = f_{\\hat{\\theta}}(x)$ that approximates the relationship above. This gives us the **observed value** of $\\hat{\\theta}_1$ from our data."
      ],
      "id": "f04b6be8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "from sklearn.linear_model import LinearRegression\n",
        "import numpy as np\n",
        "\n",
        "X = eggs[[\"egg_weight\", \"egg_length\", \"egg_breadth\"]]\n",
        "Y = eggs[\"bird_weight\"]\n",
        "\n",
        "model = LinearRegression()\n",
        "model.fit(X, Y)\n",
        "\n",
        "# This gives an array containing the fitted model parameter estimates\n",
        "thetas = model.coef_\n",
        "\n",
        "# Put the parameter estimates in a nice table for viewing\n",
        "display(pd.DataFrame(\n",
        "  [model.intercept_] + list(model.coef_),\n",
        "  columns=['theta_hat'],\n",
        "  index=['intercept', 'egg_weight', 'egg_length', 'egg_breadth']\n",
        "))\n",
        "\n",
        "print(\"RMSE\", np.mean((Y - model.predict(X)) ** 2))"
      ],
      "id": "3656850d",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Our single sample of data gives us the value of $\\hat{\\theta}_1=0.431$. To get a sense of how this estimate might vary if we were to draw different random samples, we will use [bootstrapping](https://inferentialthinking.com/chapters/13/2/Bootstrap.html?). As a refresher, to construct a bootstrap sample, we will draw a resample from the collected data that:\n",
        "\n",
        "* Has the same sample size as the collected data\n",
        "* Is drawn with replacement (this ensures that we don't draw the exact same sample every time!)\n",
        "\n",
        "We draw a bootstrap sample, use this sample to fit a model, and record the result for $\\hat{\\theta}_1$ on this bootstrapped sample. We then repeat this process many times to generate a **bootstrapped empirical distribution** of $\\hat{\\theta}_1$. This gives us an estimate of what the true distribution of $\\hat{\\theta}_1$ across all possible samples might look like."
      ],
      "id": "a83acfb8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: false\n",
        "# Set a random seed so you generate the same random sample as staff\n",
        "# In the \"real world\", we wouldn't do this\n",
        "import numpy as np\n",
        "np.random.seed(1337)\n",
        "\n",
        "# Set the sample size of each bootstrap sample\n",
        "n = len(eggs)\n",
        "\n",
        "# Create a list to store all the bootstrapped estimates\n",
        "estimates = []\n",
        "\n",
        "# Generate a bootstrap resample from `eggs` and find an estimate for theta_1 using this sample. \n",
        "# Repeat 10000 times.\n",
        "for i in range(10000):\n",
        "    # draw a bootstrap sample\n",
        "    bootstrap_resample = eggs.sample(n, replace=True)\n",
        "    X_bootstrap = bootstrap_resample[[\"egg_weight\", \"egg_length\", \"egg_breadth\"]]\n",
        "    Y_bootstrap = bootstrap_resample[\"bird_weight\"]\n",
        "    \n",
        "    # use bootstrapped sample to fit a model\n",
        "    bootstrap_model = LinearRegression()\n",
        "    bootstrap_model.fit(X_bootstrap, Y_bootstrap)\n",
        "    bootstrap_thetas = bootstrap_model.coef_\n",
        "    \n",
        "    # record the result for theta_1\n",
        "    estimates.append(bootstrap_thetas[0])\n",
        "    \n",
        "# calculate the 95% confidence interval \n",
        "lower = np.percentile(estimates, 2.5, axis=0)\n",
        "upper = np.percentile(estimates, 97.5, axis=0)\n",
        "conf_interval = (lower, upper)\n",
        "conf_interval"
      ],
      "id": "81e472f8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Our bootstrapped 95% confidence interval for $\\theta_1$ is $[-0.259, 1.103]$. Immediately, we can see that 0 *is* indeed contained in this interval – this means that we *cannot* conclude that $\\theta_1$ is non-zero! More formally, we fail to reject the null hypothesis (that $\\theta_1$ is 0) at a 5% cutoff. \n",
        "\n",
        "We can repeat this process to construct 95% confidence intervals for the other parameters of the model."
      ],
      "id": "049e4cad"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "np.random.seed(1337)\n",
        "\n",
        "theta_0_estimates = []\n",
        "theta_1_estimates = []\n",
        "theta_2_estimates = []\n",
        "theta_3_estimates = []\n",
        "\n",
        "\n",
        "for i in range(10000):\n",
        "    bootstrap_resample = eggs.sample(n, replace=True)\n",
        "    X_bootstrap = bootstrap_resample[[\"egg_weight\", \"egg_length\", \"egg_breadth\"]]\n",
        "    Y_bootstrap = bootstrap_resample[\"bird_weight\"]\n",
        "    \n",
        "    bootstrap_model = LinearRegression()\n",
        "    bootstrap_model.fit(X_bootstrap, Y_bootstrap)\n",
        "    bootstrap_theta_0 = bootstrap_model.intercept_\n",
        "    bootstrap_theta_1, bootstrap_theta_2, bootstrap_theta_3 = bootstrap_model.coef_\n",
        "    \n",
        "    theta_0_estimates.append(bootstrap_theta_0)\n",
        "    theta_1_estimates.append(bootstrap_theta_1)\n",
        "    theta_2_estimates.append(bootstrap_theta_2)\n",
        "    theta_3_estimates.append(bootstrap_theta_3)\n",
        "    \n",
        "theta_0_lower, theta_0_upper = np.percentile(theta_0_estimates, 2.5), np.percentile(theta_0_estimates, 97.5)\n",
        "theta_1_lower, theta_1_upper = np.percentile(theta_1_estimates, 2.5), np.percentile(theta_1_estimates, 97.5)\n",
        "theta_2_lower, theta_2_upper = np.percentile(theta_2_estimates, 2.5), np.percentile(theta_2_estimates, 97.5)\n",
        "theta_3_lower, theta_3_upper = np.percentile(theta_3_estimates, 2.5), np.percentile(theta_3_estimates, 97.5)\n",
        "\n",
        "# Make a nice table to view results\n",
        "pd.DataFrame({\"lower\":[theta_0_lower, theta_1_lower, theta_2_lower, theta_3_lower], \"upper\":[theta_0_upper, \\\n",
        "                theta_1_upper, theta_2_upper, theta_3_upper]}, index=[\"theta_0\", \"theta_1\", \"theta_2\", \"theta_3\"])"
      ],
      "id": "aab39098",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Something's off here. Notice that 0 is included in the 95% confidence interval for *every* parameter of the model. Using the interpretation we outlined above, this would suggest that we can't say for certain that *any* of the input variables impact the response variable! This makes it seem like our model can't make any predictions – and yet, each model we fit in our bootstrap experiment above could very much make predictions of $Y$. \n",
        "\n",
        "How can we explain this result? Think back to how we first interpreted the parameters of a linear model. We treated each $\\theta_i$ as a slope, where a unit increase in $x_i$ leads to a $\\theta_i$ increase in $Y$, **if all other variables are held constant**. It turns out that this last assumption is very important. If variables in our model are somehow related to one another, then it might not be possible to have a change in one of them while holding the others constant. This means that our interpretation framework is no longer valid! In the models we fit above, we incorporated `egg_length`, `egg_breadth`, and `egg_weight` as input variables. These variables are very likely related to one another – an egg with large `egg_length` and `egg_breadth` will likely be heavy in `egg_weight`. This means that the model parameters cannot be meaningfully interpreted as slopes. \n",
        "\n",
        "To support this conclusion, we can visualize the relationships between our feature variables. Notice the strong positive association between the features."
      ],
      "id": "94a87237"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "import seaborn as sns\n",
        "sns.pairplot(eggs[[\"egg_length\", \"egg_breadth\", \"egg_weight\", 'bird_weight']]);"
      ],
      "id": "3427e8ed",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "This issue is known as **collinearity**, sometimes also called **multicollinearity**. Collinearity occurs when one feature can be predicted fairly accurately by a linear combination of the other features, which happens when one feature is highly correlated with the others. \n",
        "\n",
        "Why is collinearity a problem? Its consequences span several aspects of the modeling process:\n",
        "\n",
        "* **Inference**: Slopes can't be interpreted for an inference task.\n",
        "* **Model Variance**: If features strongly influence one another, even small changes in the sampled data can lead to large changes in the estimated slopes.\n",
        "* **Unique Solution**: If one feature is a linear combination of the other features, the design matrix will not be full rank, and $\\mathbb{X}^{\\top}\\mathbb{X}$ is not invertible. This means that least squares does not have a unique solution. See [this section](https://ds100.org/course-notes/ols/ols.html#uniqueness-of-the-ols-solution) of Course Note 12 for more on this.\n",
        "\n",
        "The take-home point is that we need to be careful with what features we select for modeling. If two features likely encode similar information, it is often a good idea to choose only one of them as an input variable.\n",
        "\n",
        "#### A Simpler Model\n",
        "\n",
        "Let us now consider a more interpretable model: we instead assume a true relationship using only egg weight:\n",
        "\n",
        "$$f_\\theta(x) = \\theta_0 + \\theta_1 \\text{egg\\_weight} + \\epsilon$$"
      ],
      "id": "390cf62c"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "X_int = eggs[[\"egg_weight\"]]\n",
        "Y_int = eggs[\"bird_weight\"]\n",
        "\n",
        "model_int = LinearRegression()\n",
        "\n",
        "model_int.fit(X_int, Y_int)\n",
        "\n",
        "# This gives an array containing the fitted model parameter estimates\n",
        "thetas_int = model_int.coef_\n",
        "\n",
        "# Put the parameter estimates in a nice table for viewing\n",
        "pd.DataFrame({\"theta_hat\":[model_int.intercept_, thetas_int[0]]}, index=[\"theta_0\", \"theta_1\"])"
      ],
      "id": "8ffca3ff",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| code-fold: true\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Set a random seed so you generate the same random sample as staff\n",
        "# In the \"real world\", we wouldn't do this\n",
        "np.random.seed(1337)\n",
        "\n",
        "# Set the sample size of each bootstrap sample\n",
        "n = len(eggs)\n",
        "\n",
        "# Create a list to store all the bootstrapped estimates\n",
        "estimates_int = []\n",
        "\n",
        "# Generate a bootstrap resample from `eggs` and find an estimate for theta_1 using this sample. \n",
        "# Repeat 10000 times.\n",
        "for i in range(10000):\n",
        "    bootstrap_resample_int = eggs.sample(n, replace=True)\n",
        "    X_bootstrap_int = bootstrap_resample_int[[\"egg_weight\"]]\n",
        "    Y_bootstrap_int = bootstrap_resample_int[\"bird_weight\"]\n",
        "    \n",
        "    bootstrap_model_int = LinearRegression()\n",
        "    bootstrap_model_int.fit(X_bootstrap_int, Y_bootstrap_int)\n",
        "    bootstrap_thetas_int = bootstrap_model_int.coef_\n",
        "    \n",
        "    estimates_int.append(bootstrap_thetas_int[0])\n",
        "\n",
        "plt.figure(dpi=120)\n",
        "sns.histplot(estimates_int, stat=\"density\")\n",
        "plt.xlabel(r\"$\\hat{\\theta}_1$\")\n",
        "plt.title(r\"Bootstrapped estimates $\\hat{\\theta}_1$ Under the Interpretable Model\");"
      ],
      "id": "2a1d4ca3",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Notice how the interpretable model performs almost as well as our other model:"
      ],
      "id": "68a27c26"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "rmse = mean_squared_error(Y, model.predict(X))\n",
        "rmse_int = mean_squared_error(Y_int, model_int.predict(X_int))\n",
        "print(f'RMSE of Original Model: {rmse}')\n",
        "print(f'RMSE of Interpretable Model: {rmse_int}')"
      ],
      "id": "43e91c5a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Yet, the confidence interval for the true parameter $\\theta_{1}$ does not contain zero."
      ],
      "id": "89f58e64"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "lower_int = np.percentile(estimates_int, 2.5)\n",
        "upper_int = np.percentile(estimates_int, 97.5)\n",
        "\n",
        "conf_interval_int = (lower_int, upper_int)\n",
        "conf_interval_int"
      ],
      "id": "ba21a35a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "In retrospect, it’s no surprise that the weight of an egg best predicts the weight of a newly-hatched chick.\n",
        "\n",
        "A model with highly correlated variables prevents us from interpreting how the variables are related to the prediction.\n",
        "\n",
        "<!-- #### Reminder: Assumptions Matter\n",
        "\n",
        "Keep the following in mind:\n",
        "All inference assumes that the regression model holds.\n",
        "\n",
        "* If the model doesn’t hold, the inference might not be valid.\n",
        "* If the [assumptions of the bootstrap](https://inferentialthinking.com/chapters/13/3/Confidence_Intervals.html?highlight=p%20value%20confidence%20interval#care-in-using-the-bootstrap-percentile-method) don’t hold…\n",
        "    * Sample size n is large\n",
        "    * Sample is representative of population distribution (drawn i.i.d., unbiased)\n",
        "    \n",
        "    …then the results of the bootstrap might not be valid.\n",
        " -->\n"
      ],
      "id": "846e81ee"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "jupytext": {
      "text_representation": {
        "extension": ".qmd",
        "format_name": "quarto",
        "format_version": "1.0",
        "jupytext_version": "1.16.1"
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
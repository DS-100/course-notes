{
  "hash": "2b4a254618549b839c6fb45c3c0bfcb0",
  "result": {
    "markdown": "---\ntitle: Pandas I\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    toc-location: right\n    code-fold: false\n    theme:\n      - cosmo\n      - cerulean\n    callout-icon: false\n---\n\n### Learning Goals\n\n### DataFrames\n\nTabular data is one of the most common data formats used in data science. We'll primarily be looking at tabular data in Data 100.\n\nIn Data 8, you encountered the `Table` class of the `datascience` library. In Data 100, we'll be using the `DataFrame` class of the `pandas` library to represent tabular data.\n\nHere is an example of a DataFrame containing election data.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\nelections = pd.read_csv(\"data/elections.csv\")\nelections\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>2016</td>\n      <td>Jill Stein</td>\n      <td>Green</td>\n      <td>1457226</td>\n      <td>loss</td>\n      <td>1.073699</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2020</td>\n      <td>Joseph Biden</td>\n      <td>Democratic</td>\n      <td>81268924</td>\n      <td>win</td>\n      <td>51.311515</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2020</td>\n      <td>Donald Trump</td>\n      <td>Republican</td>\n      <td>74216154</td>\n      <td>loss</td>\n      <td>46.858542</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2020</td>\n      <td>Jo Jorgensen</td>\n      <td>Libertarian</td>\n      <td>1865724</td>\n      <td>loss</td>\n      <td>1.177979</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2020</td>\n      <td>Howard Hawkins</td>\n      <td>Green</td>\n      <td>405035</td>\n      <td>loss</td>\n      <td>0.255731</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows Ã— 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nLet's dissect the code above. \n\n1. We first import the ````pandas```` library into our Python environment, using the alias `pd`. <br> &emsp;```` import pandas as pd ````\n\n2. There are a number of ways to read data into a DataFrame. In Data 100, our data are typically stored in a CSV (comma-seperated values) file format. We can import a CSV file into a DataFrame by passing the data path as an argument to the following ````pandas```` function. \n<br> &emsp;```` pd.read_csv(\"elections.csv\") ```` \n\nThis code stores our DataFrame object into the ````elections```` variable. Upon inspection, our ````elections```` DataFrame has 182 rows and 6 columns. Each row represents a single record - in our example, a presedential candidate in some particular year. Each column represents a single attribute, or feature of the record.\n\nThe API (application programming interface) for the DataFrame class is enormous. In the next section, we'll discuss several methods of the DataFrame API that allow us to extract subsets of data.\n\n## Slicing in DataFrames\n\nOne of the most important tasks in manipulating a DataFrame is extracting a subset of rows and columns. This is called **slicing**. We can do so using three primary methods of the DataFrame class:\n\n1. `.loc`\n2. `.iloc`\n3. `[]`\n\n### Indexing with .loc\n\nThe `.loc` operator selects rows and columns in a DataFrame by their row and column labels, respectively. The **row label** (commonly referred to as the **index**) is the bold text on the far left of a DataFrame, while the **column label** is the text found at the top of a DataFrame. By default, `pandas` assigns row labels as sequential integers beginning from 0. The column labels in our `elections` DataFrame are the columns `Year`, `Candidate`, `Party`, `Popular Vote`, `Result`, `%`.\n\n`.loc` lets us specify the row and column labels to select from our DataFrame as the first and second arguments to the function. For example, to select the the row labeled `0` and the column labeled `Candidate` from our `elections` DataFrame:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nelections.loc[0, 'Candidate']\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n'Andrew Jackson'\n```\n:::\n:::\n\n\nTo select multiple rows and columns, we can use Python slice notation. We can select the first four rows and first four columns.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nelections.loc[0:3, 'Year':'Popular vote']\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSuppose that instead, we wanted every column value for the first four rows in the `elections` DataFrame. The shorthand `:` comes in great use.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nelections.loc[0:3, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nA couple of things we should note. Unlike conventional Python, Pandas allows us to slice string values (in our example, the column labels). Secondly, slicing in Pandas is inclusive. Notice how our resulting DataFrame includes every row and column between and including the slice labels we specified.\n\nEquivalently, we can use a list to obtain multiple rows and columns in our `elections` DataFrame. \n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nelections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLastly, we can interchange list and slicing notation.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nelections.loc[[0, 1, 2, 3], :]\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Indexing with .iloc\n\nSlicing with `.iloc` works similarily to `.loc`, although `.iloc` uses the integer positions of rows and columns rather the labels. The arguments for the `.iloc` function also behave similarly - single values, lists, indices, and any combination of these are permitted. \n\nWe can begin reproducing our results from above. Let's begin by selecting for the first presedential candidate in our `elections` DataFrame:\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# elections.loc[0, \"Candidate\"] - Previous approach\nelections.iloc[0, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n'Andrew Jackson'\n```\n:::\n:::\n\n\nNotice how the first argument to both `.loc` and `.iloc` are the same. This is because the row with a label of 0 is conveniently in the 0^th^ (or first) position of the `elections` DataFrame. Generally, this is true of any DataFrame where the row labels are incremented in ascending order from 0.\n\nHowever, when we select for the first four rows and columns using `.iloc`, we notice something.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n# elections.loc[0:3, 'Year':'Popular vote'] - Previous approach\nelections.iloc[0:4, 0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSlicing is no longer inclusive in `.iloc` - it's exclusive! Sad to say, this is one of Pandas syntatical subtleties. Don't worry, you'll get used to with practice.\n\nList behavior works just as expected.\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n#elections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']] - Previous Approach\nelections.iloc[[0, 1, 2, 3], [0, 1, 2, 3]]\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis discussion begs the question: when should we use `.loc` vs `.iloc`? In most cases, `.loc` is generally safer to use. You can imagine `.iloc` may return incorrect values when applied to a dataset where the ordering of data can change. \n\n### Indexing with []\n\nThe `[]` selection operator is the most baffling of all, yet the most commonly used. It only takes a single argument, which may be one of the following:\n\n1. A slice of row numbers\n2. A list of column labels\n3. A single column label\n\nThat is, `[]` is context dependent. Let's see some examples.\n\n##### A slice of row numbers\n\nSay we wanted the first four rows of our `elections` DataFrame.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nelections[0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##### A list of column labels\n\nSuppose we now want the first four columns.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nelections[[\"Year\", \"Candidate\", \"Party\", \"Popular vote\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>2016</td>\n      <td>Jill Stein</td>\n      <td>Green</td>\n      <td>1457226</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2020</td>\n      <td>Joseph Biden</td>\n      <td>Democratic</td>\n      <td>81268924</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2020</td>\n      <td>Donald Trump</td>\n      <td>Republican</td>\n      <td>74216154</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2020</td>\n      <td>Jo Jorgensen</td>\n      <td>Libertarian</td>\n      <td>1865724</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2020</td>\n      <td>Howard Hawkins</td>\n      <td>Green</td>\n      <td>405035</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows Ã— 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n##### A single column label\n\nLastly, if we only want the `Candidate` column.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nelections[\"Candidate\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n0         Andrew Jackson\n1      John Quincy Adams\n2         Andrew Jackson\n3      John Quincy Adams\n4         Andrew Jackson\n             ...        \n177           Jill Stein\n178         Joseph Biden\n179         Donald Trump\n180         Jo Jorgensen\n181       Howard Hawkins\nName: Candidate, Length: 182, dtype: object\n```\n:::\n:::\n\n\nThe output looks quite different - it's no longer a DataFrame! This is a **Series**. We'll talk about what a Series is in the next section.\n\n## DataFrames, Series, and Indices\n\nWe saw that selecting a single column from a DataFrame using the `[]` operator outputted a new data format, called a Series. Let's verify this claim.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ntype(elections)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ntype(elections['Candidate'])\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\nA Series is a one dimensional object that represents a single column of data. It has two components - an index and a column of data. A DataFrame is equivalent to a collection of Series, which all share the same index. Notice how the index is equivalent to the DataFrame index (or row labels) we discussed above.\n\n<img src=\"images/index_comparison.png\" alt='index_comparison' width='800'>\n\nHowever, a DataFrame index doesn't have to be an integer, nor does it have to be unique. For example, we can set our index to be the name of presedential candidates. Selecting a new Series from this modified DataFrame yields the following:\n\n<img src=\"images/index_comparison_2.png\" alt='index_comparison_2' width='800'>\n\nTo retrieve the indices of a DataFrame, simple use the `.index` attribute of the DataFrame class.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nelections.set_index(\"Candidate\", inplace=True)\nelections.index\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nIndex(['Andrew Jackson', 'John Quincy Adams', 'Andrew Jackson',\n       'John Quincy Adams', 'Andrew Jackson', 'Henry Clay', 'William Wirt',\n       'Hugh Lawson White', 'Martin Van Buren', 'William Henry Harrison',\n       ...\n       'Darrell Castle', 'Donald Trump', 'Evan McMullin', 'Gary Johnson',\n       'Hillary Clinton', 'Jill Stein', 'Joseph Biden', 'Donald Trump',\n       'Jo Jorgensen', 'Howard Hawkins'],\n      dtype='object', name='Candidate', length=182)\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nelections.reset_index(inplace=True)\n```\n:::\n\n\nEarlier, we mentioned that a Series was just a column of data. What if we wanted a single column as a DataFrame? To do so, we can pass in a list containing a single column to the `[]` selection operator.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nelections[[\"Party\"]] # [\"Party\"] is the argument - a list with a single element\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Party</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Democratic-Republican</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Democratic-Republican</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Democratic</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>National Republican</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Democratic</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>Democratic</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>Republican</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>Libertarian</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>Green</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows Ã— 1 columns</p>\n</div>\n```\n:::\n:::\n\n\n## Conditional Selection\n\nConditional selection allows us to select a subset of rows in a DataFrame if they follow some specified condition.\n\nTo understand how to use conditional selection, we must look at another input to the `.loc` and `[]` operators - a boolean array. This boolean array must have a length equal to the number of rows in the DataFrame. It will then return all rows with a corresponding `True` value in the array.\n\nHere, we will select all even-indexed rows in the first 10 rows of our DataFrame.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# Why is :9 is the correct slice to select the first 10 rows?\nelections_first_10_rows = elections.loc[:9, :]\n\n# Notice how we have exactly 10 elements in our boolean array argument\nelections_first_10_rows[[True, False, True, False, True, \\\n                         False, True, False, True, False]]\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Andrew Jackson</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Andrew Jackson</td>\n      <td>1832</td>\n      <td>Democratic</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>William Wirt</td>\n      <td>1832</td>\n      <td>Anti-Masonic</td>\n      <td>100715</td>\n      <td>loss</td>\n      <td>7.821583</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>Martin Van Buren</td>\n      <td>1836</td>\n      <td>Democratic</td>\n      <td>763291</td>\n      <td>win</td>\n      <td>52.272472</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##### Single Boolean Selection\n\nUnfortunately, using this method to select multiple rows in a large DataFrame is infeasible. Instead, we can provide a logical condition as an input to `.loc` or `[]` that returns a boolean array with said length.\n\nFor example, to return all candidates affilliated with the Independent party:\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\nlogical_operator = elections['Party'] == \"Independent\"\nelections[logical_operator]\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>121</th>\n      <td>Eugene McCarthy</td>\n      <td>1976</td>\n      <td>Independent</td>\n      <td>740460</td>\n      <td>loss</td>\n      <td>0.911649</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>John B. Anderson</td>\n      <td>1980</td>\n      <td>Independent</td>\n      <td>5719850</td>\n      <td>loss</td>\n      <td>6.631143</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>Ross Perot</td>\n      <td>1992</td>\n      <td>Independent</td>\n      <td>19743821</td>\n      <td>loss</td>\n      <td>18.956298</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>Ralph Nader</td>\n      <td>2004</td>\n      <td>Independent</td>\n      <td>465151</td>\n      <td>loss</td>\n      <td>0.380663</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>Ralph Nader</td>\n      <td>2008</td>\n      <td>Independent</td>\n      <td>739034</td>\n      <td>loss</td>\n      <td>0.563842</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>Evan McMullin</td>\n      <td>2016</td>\n      <td>Independent</td>\n      <td>732273</td>\n      <td>loss</td>\n      <td>0.539546</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nHere, `logical_operator` evaluates to a Series of boolean values with length 182.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nlogical_operator\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n0      False\n1      False\n2      False\n3      False\n4      False\n       ...  \n177    False\n178    False\n179    False\n180    False\n181    False\nName: Party, Length: 182, dtype: bool\n```\n:::\n:::\n\n\nRows 121, 130, 143, 161, 167, and 174 evaluate to `True` and are thus returned in the DataFrame.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code code-fold=\"true\"}\nprint(logical_operator.loc[[121, 130, 143, 161, 167, 174]])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n121    True\n130    True\n143    True\n161    True\n167    True\n174    True\nName: Party, dtype: bool\n```\n:::\n:::\n\n\nPassing a Series as an argument to `elections[]` has the same affect as using in a boolean array. In fact, the `[]` selection operator can take a boolean Series, array, and list as arguments. These three are used interchangeably thoughout the course.\n\nSimilarly, we can use `.loc` to achieve similar results.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nelections.loc[elections['Party'] == \"Independent\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>121</th>\n      <td>Eugene McCarthy</td>\n      <td>1976</td>\n      <td>Independent</td>\n      <td>740460</td>\n      <td>loss</td>\n      <td>0.911649</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>John B. Anderson</td>\n      <td>1980</td>\n      <td>Independent</td>\n      <td>5719850</td>\n      <td>loss</td>\n      <td>6.631143</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>Ross Perot</td>\n      <td>1992</td>\n      <td>Independent</td>\n      <td>19743821</td>\n      <td>loss</td>\n      <td>18.956298</td>\n    </tr>\n    <tr>\n      <th>161</th>\n      <td>Ralph Nader</td>\n      <td>2004</td>\n      <td>Independent</td>\n      <td>465151</td>\n      <td>loss</td>\n      <td>0.380663</td>\n    </tr>\n    <tr>\n      <th>167</th>\n      <td>Ralph Nader</td>\n      <td>2008</td>\n      <td>Independent</td>\n      <td>739034</td>\n      <td>loss</td>\n      <td>0.563842</td>\n    </tr>\n    <tr>\n      <th>174</th>\n      <td>Evan McMullin</td>\n      <td>2016</td>\n      <td>Independent</td>\n      <td>732273</td>\n      <td>loss</td>\n      <td>0.539546</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##### Multiple Boolean Selection\n\nBoolean conditions can be combined using various operators that allow us to filter results by multiple conditions. Some examples include the `&` (and) operator and `|` (or) operator.\n\n**Note** When using logical operators, pay careful attention to surround each condition with a set of paranthesis `()`. Doing so will ensure your code doesn't throw an error.\n\nFor example, if we want to return data on all presidential candidates affiliated with the Independent Party before the 21^st^ century, we can do so:\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nelections[(elections['Party'] == \"Independent\") \\\n          & (elections['Year'] < 2000)]\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>121</th>\n      <td>Eugene McCarthy</td>\n      <td>1976</td>\n      <td>Independent</td>\n      <td>740460</td>\n      <td>loss</td>\n      <td>0.911649</td>\n    </tr>\n    <tr>\n      <th>130</th>\n      <td>John B. Anderson</td>\n      <td>1980</td>\n      <td>Independent</td>\n      <td>5719850</td>\n      <td>loss</td>\n      <td>6.631143</td>\n    </tr>\n    <tr>\n      <th>143</th>\n      <td>Ross Perot</td>\n      <td>1992</td>\n      <td>Independent</td>\n      <td>19743821</td>\n      <td>loss</td>\n      <td>18.956298</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Handy Utility Functions\n\nThere are a large number of operations supported by `pandas` Series and DataFrames that allow us to efficiently manipulate data . In this section, we'll cover a few.\n\n1. `.head` and `.tail`\n2. `.shape` and `.size`\n2. `.describe`\n3. `.sample`\n4. `.value_counts`\n5. `.unique`\n6. `.sort_values`\n\n#### .head / .tail\n\n`.head(n)` and `.tail(n)` display the first `n` and last `n` rows in a DataFrame, respectively.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nelections.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Andrew Jackson</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>John Quincy Adams</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\nelections.tail(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>179</th>\n      <td>Donald Trump</td>\n      <td>2020</td>\n      <td>Republican</td>\n      <td>74216154</td>\n      <td>loss</td>\n      <td>46.858542</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>Jo Jorgensen</td>\n      <td>2020</td>\n      <td>Libertarian</td>\n      <td>1865724</td>\n      <td>loss</td>\n      <td>1.177979</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>Howard Hawkins</td>\n      <td>2020</td>\n      <td>Green</td>\n      <td>405035</td>\n      <td>loss</td>\n      <td>0.255731</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### .shape / .size\n\n`.shape` returns a tuple with the number of rows and columns. <br>\n`.size` returns the total number of data cells. This is the product of the number of rows and columns.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nelections.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\n(182, 6)\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nnum_rows, num_cols = elections.shape\nassert(elections.size == num_rows * num_cols)\nelections.size\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\n1092\n```\n:::\n:::\n\n\n#### .describe\n\n`.describe()` returns a DataFrame of useful summary statistics for each numerical column.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nelections.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Popular vote</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>182.000000</td>\n      <td>1.820000e+02</td>\n      <td>182.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>1934.087912</td>\n      <td>1.235364e+07</td>\n      <td>27.470350</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>57.048908</td>\n      <td>1.907715e+07</td>\n      <td>22.968034</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1824.000000</td>\n      <td>1.007150e+05</td>\n      <td>0.098088</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>1889.000000</td>\n      <td>3.876395e+05</td>\n      <td>1.219996</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>1936.000000</td>\n      <td>1.709375e+06</td>\n      <td>37.677893</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1988.000000</td>\n      <td>1.897775e+07</td>\n      <td>48.354977</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2020.000000</td>\n      <td>8.126892e+07</td>\n      <td>61.344703</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### .sample\n\n`.sample(n)` returns a random sample of `n` items from the given DataFrame.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nelections.sample(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>160</th>\n      <td>Michael Peroutka</td>\n      <td>2004</td>\n      <td>Constitution</td>\n      <td>143630</td>\n      <td>loss</td>\n      <td>0.117542</td>\n    </tr>\n    <tr>\n      <th>151</th>\n      <td>Al Gore</td>\n      <td>2000</td>\n      <td>Democratic</td>\n      <td>50999897</td>\n      <td>loss</td>\n      <td>48.491813</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### .value_counts\n\n`.value_counts()` is called on a Series and returns a Series containing the count of unique values.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nelections['Candidate'].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nNorman Thomas         5\nRalph Nader           4\nEugene V. Debs        4\nFranklin Roosevelt    4\nAndrew Jackson        3\n                     ..\nJohn G. Woolley       1\nJohn G. Schmitz       1\nSilas C. Swallow      1\nStephen A. Douglas    1\nAlf Landon            1\nName: Candidate, Length: 132, dtype: int64\n```\n\nThis code tells us how many times each candidate ran for president of the United States.\n:::\n:::\n\n\n#### .unique\n\n`.unique()` is called on a Series and returns an array with the unique values contained in that Series.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\n# For brevity, we have limited the results to 5 candidates \nelections['Candidate'].unique()[:5]\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\narray(['Andrew Jackson', 'John Quincy Adams', 'Henry Clay',\n       'William Wirt', 'Hugh Lawson White'], dtype=object)\n```\n:::\n:::\n\n\n#### .sort_values\n\n`.sort_values()` returns a sorted Series of values from the Series it was called on. Numerical values are in sorted magnitude, while text is sorted in alphabetical order. You may specify optional arguments to sort in ascending or descending order.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nelections['Candidate'].sort_values()\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n75           Aaron S. Watkins\n27            Abraham Lincoln\n23            Abraham Lincoln\n108           Adlai Stevenson\n105           Adlai Stevenson\n                ...          \n19             Winfield Scott\n37     Winfield Scott Hancock\n74             Woodrow Wilson\n70             Woodrow Wilson\n16             Zachary Taylor\nName: Candidate, Length: 182, dtype: object\n```\n:::\n:::\n\n\n## Parting Note\n\nThe `pandas` library is enormous and contains many useful functions. Here is a link to [documentation](https://pandas.pydata.org/docs/).\n\nThis lecture and the next will cover important methods you should be fluent in. However, we want you to get familiar with the real world programming practice of ...Googling! Answers to your questions can be found in documentation, Stack Overflow, etc. \n\nWith that, let's move on to Pandas II.\n\n",
    "supporting": [
      "pandas_1_copy_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
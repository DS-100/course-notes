{
  "hash": "d49596f0b82372ac8942a5cb2468912f",
  "result": {
    "markdown": "---\ntitle: Pandas I\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    toc-location: right\n    code-fold: false\n    theme:\n      - cosmo\n      - cerulean\n    callout-icon: false\n---\n\n::: {.callout-note collapse=\"false\"}\n## Learning Outcomes\n\n- Build familiarity with `pandas` and `pandas` syntax.\n- Learn key data structures: `DataFrame`, `Series`, and `Index`.\n- Understand methods for extracting data: `.loc`, `.iloc`, and `[]`.\n:::\n\nIn this sequence of lectures, we will dive right into things by having you explore and manipulate real-world data. We'll first introduce `pandas`, a popular Python library for interacting with **tabular data**.\n\n## Tabular Data\n\nData scientists work with data stored in a variety of formats. The primary focus of this class is understanding *tabular data* — data that is stored in a table.\n\nTabular data is one of the most common systems that data scientists use to organize data. This is in large part due to the simplicity and flexibility of tables. Tables allow us to represent each **observation**, or instance of collecting data from an individual, as its own *row*. We can record each observation's distinct characteristics, or **features**, in separate *columns*.\n\nTo see this in action, we'll explore the `elections` dataset, which stores information about political candidates who ran for president of the United States in previous years.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport pandas as pd\npd.read_csv(\"data/elections.csv\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>2016</td>\n      <td>Jill Stein</td>\n      <td>Green</td>\n      <td>1457226</td>\n      <td>loss</td>\n      <td>1.073699</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2020</td>\n      <td>Joseph Biden</td>\n      <td>Democratic</td>\n      <td>81268924</td>\n      <td>win</td>\n      <td>51.311515</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2020</td>\n      <td>Donald Trump</td>\n      <td>Republican</td>\n      <td>74216154</td>\n      <td>loss</td>\n      <td>46.858542</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2020</td>\n      <td>Jo Jorgensen</td>\n      <td>Libertarian</td>\n      <td>1865724</td>\n      <td>loss</td>\n      <td>1.177979</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2020</td>\n      <td>Howard Hawkins</td>\n      <td>Green</td>\n      <td>405035</td>\n      <td>loss</td>\n      <td>0.255731</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nIn the `elections` dataset, each row represents one instance of a candidate running for president in a particular year. For example, the first row represents Andrew Jackson running for president in the year 1824. Each column represents one characteristic piece of information about each presidential candidate. For example, the column named \"Result\" stores whether or not the candidate won the election. \n\nYour work in Data 8 helped you grow very familiar with using and interpreting data stored in a tabular format. Back then, you used the `Table` class of the `datascience` library, a special programming library created specifically for Data 8 students.\n\nIn Data 100, we will be working with the programming library `pandas`, which is generally accepted in the data science community as the industry- and academia-standard tool for manipulating tabular data (as well as the inspiration for Petey, our panda bear mascot).\n\nUsing `pandas`, we can\n\n- Arrange data in a tabular format.\n- Extract useful information filtered by specific conditions.\n- Operate on data to gain new insights.\n- Apply `NumPy` functions to our data (our friends from Data 8).\n- Perform vectorized computations to speed up our analysis (Lab 1).\n\n## `Series`, `DataFrame`s, and Indices\n\nTo begin our work in `pandas`, we must first import the library into our Python environment. This will allow us to use `pandas` data structures and methods in our code.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# `pd` is the conventional alias for Pandas, as `np` is for NumPy\nimport pandas as pd\n```\n:::\n\n\nThere are three fundamental data structures in `pandas`:\n\n1. **Series**: 1D labeled array data; best thought of as columnar data.\n2. **DataFrame**: 2D tabular data with rows and columns.\n3. **Index**: A sequence of row/column labels.\n\n`DataFrame`s, `Series`, and Indices can be represented visually in the following diagram, which considers the first few rows of the `elections` dataset.\n\n![](images/df_elections.png)\n\nNotice how the **DataFrame** is a two-dimensional object — it contains both rows and columns. The **Series** above is a singular column of this `DataFrame`, namely the `Result` column. Both contain an **Index**, or a shared list of row labels (the integers from 0 to 4, inclusive).\n\n### Series\n\nA Series represents a column of a `DataFrame`; more generally, it can be any 1-dimensional array-like object. It contains:\n\n- A sequence of **values** of the same type.\n- A sequence of data labels called the **index**.\n\nIn the cell below, we create a `Series` named `s`.\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ns = pd.Series([\"welcome\", \"to\", \"data 100\"])\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n0     welcome\n1          to\n2    data 100\ndtype: object\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ns.values # Data values contained within the Series\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\narray(['welcome', 'to', 'data 100'], dtype=object)\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ns.index # The Index of the Series\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nRangeIndex(start=0, stop=3, step=1)\n```\n:::\n:::\n\n\nBy default, the Index of a Series is a sequential list of integers beginning from 0. Optionally, a manually specified list of desired indices can be passed to the `index` argument.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ns = pd.Series([-1, 10, 2], index = [\"a\", \"b\", \"c\"])\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\na    -1\nb    10\nc     2\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ns.index\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nIndex(['a', 'b', 'c'], dtype='object')\n```\n:::\n:::\n\n\nIndices can also be changed after initialization.\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ns.index = [\"first\", \"second\", \"third\"]\ns\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\nfirst     -1\nsecond    10\nthird      2\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ns.index\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nIndex(['first', 'second', 'third'], dtype='object')\n```\n:::\n:::\n\n\n#### Selection in `Series`\n\nMuch like when working with `NumPy` arrays, we can select a single value or a set of values from a `Series`. To do so, there are three primary methods:\n\n1. A single label.\n2. A list of labels.\n3. A filtering condition.\n\nTo demonstrate this, let's define the Series `ser`.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nser = pd.Series([4, -2, 0, 6], index = [\"a\", \"b\", \"c\", \"d\"])\nser\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\na    4\nb   -2\nc    0\nd    6\ndtype: int64\n```\n:::\n:::\n\n\n##### A Single Label\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nser[\"a\"] # We return the value stored at the Index label \"a\"\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n4\n```\n:::\n:::\n\n\n##### A List of Labels\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nser[[\"a\", \"c\"]] # We return a *Series* of the values stored at the Index labels \"a\" and \"c\"\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\na    4\nc    0\ndtype: int64\n```\n:::\n:::\n\n\n##### A Filtering Condition\n\nPerhaps the most interesting (and useful) method of selecting data from a Series is by using a filtering condition. \n\nFirst, we apply a boolean operation to the `Series`. This creates **a new Series of boolean values**.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nser > 0 # Filter condition: select all elements greater than 0\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\na     True\nb    False\nc    False\nd     True\ndtype: bool\n```\n:::\n:::\n\n\nWe then use this boolean condition to index into our original `Series`. `pandas` will select only the entries in the original `Series` that satisfy the condition.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nser[ser > 0] \n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\na    4\nd    6\ndtype: int64\n```\n:::\n:::\n\n\n### DataFrames\n\nTypically, we will work with `Series` using the perspective that they are columns in a `DataFrame`. We can think of a **DataFrame** as a collection of **Series** that all share the same **Index**. \n\nIn Data 8, you encountered the `Table` class of the `datascience` library, which represented tabular data. In Data 100, we'll be using the `DataFrame` class of the `pandas` library.\n\n#### Creating a `DataFrame`\n\nThere are many ways to create a `DataFrame`. Here, we will cover the most popular approaches:\n\n1. From a CSV file.\n2. Using a list and column name(s).\n3. From a dictionary.\n4. From a `Series`.\n\nMore generally, the syntax for creating a `DataFrame` is: `pandas.DataFrame(data, index, columns)`.\n\n##### From a CSV file\nIn Data 100, our data are typically stored in a CSV (comma-separated values) file format. We can import a CSV file into a `DataFrame` by passing the data path as an argument to the following ````pandas```` function. \n<br> &emsp;```` pd.read_csv(\"filename.csv\") ```` \n\nWith our new understanding of `pandas` in hand, let's return to the `elections` dataset from before. Now, we can recognize that it is represented as a `pandas` DataFrame.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nelections = pd.read_csv(\"data/elections.csv\")\nelections\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>2016</td>\n      <td>Jill Stein</td>\n      <td>Green</td>\n      <td>1457226</td>\n      <td>loss</td>\n      <td>1.073699</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2020</td>\n      <td>Joseph Biden</td>\n      <td>Democratic</td>\n      <td>81268924</td>\n      <td>win</td>\n      <td>51.311515</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2020</td>\n      <td>Donald Trump</td>\n      <td>Republican</td>\n      <td>74216154</td>\n      <td>loss</td>\n      <td>46.858542</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2020</td>\n      <td>Jo Jorgensen</td>\n      <td>Libertarian</td>\n      <td>1865724</td>\n      <td>loss</td>\n      <td>1.177979</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2020</td>\n      <td>Howard Hawkins</td>\n      <td>Green</td>\n      <td>405035</td>\n      <td>loss</td>\n      <td>0.255731</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows × 6 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis code stores our `DataFrame` object in the ````elections```` variable. Upon inspection, our ````elections```` DataFrame has 182 rows and 6 columns (`Year`, `Candidate`, `Party`, `Popular Vote`, `Result`, `%`). Each row represents a single record — in our example, a presidential candidate from some particular year. Each column represents a single attribute or feature of the record.\n\n##### Using a List and Column Name(s)\n\nWe'll now explore creating a `DataFrame` with data of our own.\n\nConsider the following examples. The first code cell creates a `DataFrame` with a single column `Numbers`. The second creates a `DataFrame` with the columns `Numbers` and `Description`. Notice how a 2D list of values is required to initialize the second `DataFrame` — each nested list represents a single row of data.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf_list = pd.DataFrame([1, 2, 3], columns=[\"Numbers\"])\ndf_list\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Numbers</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf_list = pd.DataFrame([[1, \"one\"], [2, \"two\"]], columns = [\"Number\", \"Description\"])\ndf_list\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Number</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>one</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>two</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##### From a Dictionary\n\nA third (and more common) way to create a `DataFrame` is with a dictionary. The dictionary keys represent the column names, and the dictionary values represent the column values.\n\nBelow are two ways of implementing this approach. The first is based on specifying the columns of the `DataFrame`, whereas the second is based on specifying the rows of the `DataFrame`.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf_dict = pd.DataFrame({\"Fruit\": [\"Strawberry\", \"Orange\"], \"Price\": [5.49, 3.99]})\ndf_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Fruit</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Strawberry</td>\n      <td>5.49</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Orange</td>\n      <td>3.99</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndf_dict = pd.DataFrame([{\"Fruit\":\"Strawberry\", \"Price\":5.49}, {\"Fruit\": \"Orange\", \"Price\":3.99}])\ndf_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Fruit</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Strawberry</td>\n      <td>5.49</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Orange</td>\n      <td>3.99</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##### From a `Series`\n\nEarlier, we explained how a `Series` was synonymous to a column in a `DataFrame`. It follows, then, that a `DataFrame` is equivalent to a collection of `Series`, which all share the same `Index`. \n\nIn fact, we can initialize a `DataFrame` by merging two or more `Series`.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\n# Notice how our indices, or row labels, are the same\n\ns_a = pd.Series([\"a1\", \"a2\", \"a3\"], index = [\"r1\", \"r2\", \"r3\"])\ns_b = pd.Series([\"b1\", \"b2\", \"b3\"], index = [\"r1\", \"r2\", \"r3\"])\n\npd.DataFrame({\"A-column\": s_a, \"B-column\": s_b})\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A-column</th>\n      <th>B-column</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>r1</th>\n      <td>a1</td>\n      <td>b1</td>\n    </tr>\n    <tr>\n      <th>r2</th>\n      <td>a2</td>\n      <td>b2</td>\n    </tr>\n    <tr>\n      <th>r3</th>\n      <td>a3</td>\n      <td>b3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\npd.DataFrame(s_a)\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>r1</th>\n      <td>a1</td>\n    </tr>\n    <tr>\n      <th>r2</th>\n      <td>a2</td>\n    </tr>\n    <tr>\n      <th>r3</th>\n      <td>a3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ns_a.to_frame()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>0</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>r1</th>\n      <td>a1</td>\n    </tr>\n    <tr>\n      <th>r2</th>\n      <td>a2</td>\n    </tr>\n    <tr>\n      <th>r3</th>\n      <td>a3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Indices\n\nOn a more technical note, an `Index` doesn't have to be an integer, nor does it have to be unique. For example, we can set the index of the `elections` Dataframe to be the name of presidential candidates. \n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\n# Creating a DataFrame from a CSV file and specifying the Index column\nelections = pd.read_csv(\"data/elections.csv\", index_col = \"Candidate\")\nelections\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n    <tr>\n      <th>Candidate</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Andrew Jackson</th>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>John Quincy Adams</th>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>Andrew Jackson</th>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>John Quincy Adams</th>\n      <td>1828</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n    <tr>\n      <th>Andrew Jackson</th>\n      <td>1832</td>\n      <td>Democratic</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Jill Stein</th>\n      <td>2016</td>\n      <td>Green</td>\n      <td>1457226</td>\n      <td>loss</td>\n      <td>1.073699</td>\n    </tr>\n    <tr>\n      <th>Joseph Biden</th>\n      <td>2020</td>\n      <td>Democratic</td>\n      <td>81268924</td>\n      <td>win</td>\n      <td>51.311515</td>\n    </tr>\n    <tr>\n      <th>Donald Trump</th>\n      <td>2020</td>\n      <td>Republican</td>\n      <td>74216154</td>\n      <td>loss</td>\n      <td>46.858542</td>\n    </tr>\n    <tr>\n      <th>Jo Jorgensen</th>\n      <td>2020</td>\n      <td>Libertarian</td>\n      <td>1865724</td>\n      <td>loss</td>\n      <td>1.177979</td>\n    </tr>\n    <tr>\n      <th>Howard Hawkins</th>\n      <td>2020</td>\n      <td>Green</td>\n      <td>405035</td>\n      <td>loss</td>\n      <td>0.255731</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\nWe can also select a new column and set it as the index of the DataFrame. For example, we can set the index of the `elections` Dataframe to represent the candidate's party.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nelections.reset_index(inplace = True) # Resetting the index so we can set the Index again\n# This sets the index to the \"Party\" column\nelections.set_index(\"Party\")\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n    <tr>\n      <th>Party</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Democratic-Republican</th>\n      <td>Andrew Jackson</td>\n      <td>1824</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>Democratic-Republican</th>\n      <td>John Quincy Adams</td>\n      <td>1824</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>Democratic</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>National Republican</th>\n      <td>John Quincy Adams</td>\n      <td>1828</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n    <tr>\n      <th>Democratic</th>\n      <td>Andrew Jackson</td>\n      <td>1832</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>Green</th>\n      <td>Jill Stein</td>\n      <td>2016</td>\n      <td>1457226</td>\n      <td>loss</td>\n      <td>1.073699</td>\n    </tr>\n    <tr>\n      <th>Democratic</th>\n      <td>Joseph Biden</td>\n      <td>2020</td>\n      <td>81268924</td>\n      <td>win</td>\n      <td>51.311515</td>\n    </tr>\n    <tr>\n      <th>Republican</th>\n      <td>Donald Trump</td>\n      <td>2020</td>\n      <td>74216154</td>\n      <td>loss</td>\n      <td>46.858542</td>\n    </tr>\n    <tr>\n      <th>Libertarian</th>\n      <td>Jo Jorgensen</td>\n      <td>2020</td>\n      <td>1865724</td>\n      <td>loss</td>\n      <td>1.177979</td>\n    </tr>\n    <tr>\n      <th>Green</th>\n      <td>Howard Hawkins</td>\n      <td>2020</td>\n      <td>405035</td>\n      <td>loss</td>\n      <td>0.255731</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows × 5 columns</p>\n</div>\n```\n:::\n:::\n\n\nAnd, if we'd like, we can revert the index back to the default list of integers.\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# This resets the index to be the default list of integer\nelections.reset_index(inplace=True) \nelections.index\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nRangeIndex(start=0, stop=182, step=1)\n```\n:::\n:::\n\n\nIt is also important to note that the row labels that constitute an index don't have to be unique. While index values can be unique and numeric, acting as a row number, they can also be named and non-unique. \n\nHere we see unique and numeric index values.\n![](images/uniqueindex.png)\n\nHowever, here the index values here are non-unique. \n![](images/non-uniqueindex.png)\n\n## `DataFrame` Attributes: Index, Columns, and Shape\n\nOn the other hand, column names in a `DataFrame` are almost always unique. Looking back to the `elections` dataset, it wouldn't make sense to have two columns named \"Candidate\".\n\nSometimes, you'll want to extract these different values, in particular, the list of row and column labels.\n\nFor index/row labels, use `DataFrame.index`:\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nelections.set_index(\"Party\", inplace = True)\nelections.index\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nIndex(['Democratic-Republican', 'Democratic-Republican', 'Democratic',\n       'National Republican', 'Democratic', 'National Republican',\n       'Anti-Masonic', 'Whig', 'Democratic', 'Whig',\n       ...\n       'Constitution', 'Republican', 'Independent', 'Libertarian',\n       'Democratic', 'Green', 'Democratic', 'Republican', 'Libertarian',\n       'Green'],\n      dtype='object', name='Party', length=182)\n```\n:::\n:::\n\n\nFor column labels, use `DataFrame.columns`:\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nelections.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nIndex(['index', 'Candidate', 'Year', 'Popular vote', 'Result', '%'], dtype='object')\n```\n:::\n:::\n\n\nAnd for the shape of the DataFrame, we can use `DataFrame.shape`:\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nelections.shape\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\n(182, 6)\n```\n:::\n:::\n\n\n## Slicing in `DataFrame`s\n\nNow that we've learned more about `DataFrame`s, let's dive deeper into their capabilities. \n\nThe API (Application Programming Interface) for the `DataFrame` class is enormous. In this section, we'll discuss several methods of the `DataFrame` API that allow us to extract subsets of data.\n\nThe simplest way to manipulate a `DataFrame` is to extract a subset of rows and columns, known as **slicing**. \n\nCommon ways we may want to extract data are grabbing:\n\n- The first or last `n` rows in the `DataFrame`.\n- Data with a certain label.\n- Data at a certain position.\n\nWe will do so with four primary methods of the DataFrame class:\n\n1. `.head` and `.tail`\n2. `.loc`\n3. `.iloc`\n4. `[]`\n\n### Extracting data with `.head` and `.tail`\n\nThe simplest scenario in which we want to extract data is when we simply want to select the first or last few rows of the `DataFrame`.\n\nTo extract the first `n` rows of a DataFrame `df`, we use the syntax `df.head(n)`.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nelections = pd.read_csv(\"data/elections.csv\")\n\n# Extract the first 5 rows of the DataFrame\nelections.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSimilarly, calling `df.tail(n)` allows us to extract the last `n` rows of the DataFrame.  \n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\n# Extract the last 5 rows of the DataFrame\nelections.tail(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>177</th>\n      <td>2016</td>\n      <td>Jill Stein</td>\n      <td>Green</td>\n      <td>1457226</td>\n      <td>loss</td>\n      <td>1.073699</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2020</td>\n      <td>Joseph Biden</td>\n      <td>Democratic</td>\n      <td>81268924</td>\n      <td>win</td>\n      <td>51.311515</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2020</td>\n      <td>Donald Trump</td>\n      <td>Republican</td>\n      <td>74216154</td>\n      <td>loss</td>\n      <td>46.858542</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2020</td>\n      <td>Jo Jorgensen</td>\n      <td>Libertarian</td>\n      <td>1865724</td>\n      <td>loss</td>\n      <td>1.177979</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2020</td>\n      <td>Howard Hawkins</td>\n      <td>Green</td>\n      <td>405035</td>\n      <td>loss</td>\n      <td>0.255731</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Label-based Extraction: Indexing with `.loc`\n\nFor the more complex task of extracting data with specific column or index labels, we can use `.loc`. The `.loc` accessor allows us to specify the ***labels*** of rows and columns we wish to extract. The **labels** (commonly referred to as the **indices**) are the bold text on the far *left* of a DataFrame, while the **column labels** are the column names found at the *top* of a DataFrame.\n\n![](images/locgraphic.png)\n\nTo grab data with `.loc`, we must specify the row and column label(s) where the data exists. The row labels are the first argument to the `.loc` function; the column labels are the second.\n\nArguments to `.loc` can be:\n\n- A single value.\n- A slice.\n- A list.\n\nFor example, to select a single value, we can select the row labeled `0` and the column labeled `Candidate` from the `elections` `DataFrame`.\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nelections.loc[0, 'Candidate']\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\n'Andrew Jackson'\n```\n:::\n:::\n\n\nKeep in mind that passing in just one argument as a single value will produce a `Series`. Below, we've extracted a subset of the `\"Popular vote\"` column as a `Series`.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nelections.loc[[87, 25, 179], \"Popular vote\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\n87     15761254\n25       848019\n179    74216154\nName: Popular vote, dtype: int64\n```\n:::\n:::\n\n\nTo select *multiple* rows and columns, we can use Python slice notation. Here, we select the rows from labels `0` to `3` and the columns from labels `\"Year\"` to `\"Popular vote\"`. \n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nelections.loc[0:3, 'Year':'Popular vote']\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSuppose that instead, we want to extract *all* column values for the first four rows in the `elections` DataFrame. The shorthand `:` is useful for this.\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nelections.loc[0:3, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nWe can use the same shorthand to extract all rows. \n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nelections.loc[:, [\"Year\", \"Candidate\", \"Result\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Result</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>loss</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>win</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>win</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>loss</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>win</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>2016</td>\n      <td>Jill Stein</td>\n      <td>loss</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2020</td>\n      <td>Joseph Biden</td>\n      <td>win</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2020</td>\n      <td>Donald Trump</td>\n      <td>loss</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2020</td>\n      <td>Jo Jorgensen</td>\n      <td>loss</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2020</td>\n      <td>Howard Hawkins</td>\n      <td>loss</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nThere are a couple of things we should note. Firstly, unlike conventional Python, `pandas` allows us to slice string values (in our example, the column labels). Secondly, slicing with `.loc` is *inclusive*. Notice how our resulting `DataFrame` includes every row and column between and including the slice labels we specified.\n\nEquivalently, we can use a list to obtain multiple rows and columns in our `elections` DataFrame. \n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nelections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']]\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLastly, we can interchange list and slicing notation.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nelections.loc[[0, 1, 2, 3], :]\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Integer-based Extraction: Indexing with `.iloc`\n\nSlicing with `.iloc` works similarly to `.loc`. However, `.iloc` uses the *index positions* of rows and columns rather than the labels (think to yourself: **l**oc uses **l**ables; **i**loc uses **i**ndices). The arguments to the `.iloc` function also behave similarly — single values, lists, indices, and any combination of these are permitted. \n\nLet's begin reproducing our results from above. We'll begin by selecting the first presidential candidate in our `elections` DataFrame:\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\n# elections.loc[0, \"Candidate\"] - Previous approach\nelections.iloc[0, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\n'Andrew Jackson'\n```\n:::\n:::\n\n\nNotice how the first argument to both `.loc` and `.iloc` are the same. This is because the row with a label of 0 is conveniently in the $0^{th}$ (equivalently, the first position) of the `elections` DataFrame. Generally, this is true of any DataFrame where the row labels are incremented in ascending order from 0.\n\nAnd, as before, if we were to pass in only one single value argument, our result would be a `Series`.\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\nelections.iloc[[1,2,3],1]\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\n1    John Quincy Adams\n2       Andrew Jackson\n3    John Quincy Adams\nName: Candidate, dtype: object\n```\n:::\n:::\n\n\nHowever, when we select the first four rows and columns using `.iloc`, we notice something.\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\n# elections.loc[0:3, 'Year':'Popular vote'] - Previous approach\nelections.iloc[0:4, 0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSlicing is no longer inclusive in `.iloc` — it's *exclusive*. In other words, the right end of a slice is not included when using `.iloc`. This is one of the subtleties of `pandas` syntax; you will get used to it with practice.\n\nList behavior works just as expected.\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\n#elections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']] - Previous Approach\nelections.iloc[[0, 1, 2, 3], [0, 1, 2, 3]]\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAnd just like with `.loc`, we can use a colon with `.iloc` to extract all rows or columns.\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nelections.iloc[:, 0:3]\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>2016</td>\n      <td>Jill Stein</td>\n      <td>Green</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2020</td>\n      <td>Joseph Biden</td>\n      <td>Democratic</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2020</td>\n      <td>Donald Trump</td>\n      <td>Republican</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2020</td>\n      <td>Jo Jorgensen</td>\n      <td>Libertarian</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2020</td>\n      <td>Howard Hawkins</td>\n      <td>Green</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows × 3 columns</p>\n</div>\n```\n:::\n:::\n\n\nThis discussion begs the question: When should we use `.loc` vs. `.iloc`? In most cases, `.loc` is generally safer to use. You can imagine `.iloc` may return incorrect values when applied to a dataset where the ordering of data can change. However, `.iloc` can still be useful — for example, if you are looking at a `DataFrame` of sorted movie earnings and want to get the median earnings for a given year, you can use `.iloc` to index into the middle.\n\nOverall, it is important to remember that:\n\n- `.loc` performances **l**abel-based extraction.\n- `.iloc` performs **i**nteger-based extraction.\n\n### Context-dependent Extraction: Indexing with `[]`\n\nThe `[]` selection operator is the most baffling of all, yet the most commonly used. It only takes a single argument, which may be one of the following:\n\n1. A slice of row numbers.\n2. A list of column labels.\n3. A single-column label.\n\nThat is, `[]` is *context-dependent*. Let's see some examples.\n\n#### A slice of row numbers\n\nSay we wanted the first four rows of our `elections` DataFrame.\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nelections[0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### A list of column labels\n\nSuppose we now want the first four columns.\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\nelections[[\"Year\", \"Candidate\", \"Party\", \"Popular vote\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>177</th>\n      <td>2016</td>\n      <td>Jill Stein</td>\n      <td>Green</td>\n      <td>1457226</td>\n    </tr>\n    <tr>\n      <th>178</th>\n      <td>2020</td>\n      <td>Joseph Biden</td>\n      <td>Democratic</td>\n      <td>81268924</td>\n    </tr>\n    <tr>\n      <th>179</th>\n      <td>2020</td>\n      <td>Donald Trump</td>\n      <td>Republican</td>\n      <td>74216154</td>\n    </tr>\n    <tr>\n      <th>180</th>\n      <td>2020</td>\n      <td>Jo Jorgensen</td>\n      <td>Libertarian</td>\n      <td>1865724</td>\n    </tr>\n    <tr>\n      <th>181</th>\n      <td>2020</td>\n      <td>Howard Hawkins</td>\n      <td>Green</td>\n      <td>405035</td>\n    </tr>\n  </tbody>\n</table>\n<p>182 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n#### A single-column label\n\nLastly, `[]` allows us to extract only the `Candidate` column.\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\nelections[\"Candidate\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n0         Andrew Jackson\n1      John Quincy Adams\n2         Andrew Jackson\n3      John Quincy Adams\n4         Andrew Jackson\n             ...        \n177           Jill Stein\n178         Joseph Biden\n179         Donald Trump\n180         Jo Jorgensen\n181       Howard Hawkins\nName: Candidate, Length: 182, dtype: object\n```\n:::\n:::\n\n\nThe output is a `Series`! In this course, we'll become very comfortable with `[]`, especially for selecting columns. In practice, `[]` is much more common than `.loc`, especially since it is far more concise.\n\n## Parting Note\n\nThe `pandas` library is enormous and contains many useful functions. Here is a link to [documentation](https://pandas.pydata.org/docs/). We certainly don't expect you to memorize each and every method of the library.\n\nThe introductory Data 100 `pandas` lectures will provide a high-level view of the key data structures and methods that will form the foundation of your `pandas` knowledge. A goal of this course is to help you build your familiarity with the real-world programming practice of ...Googling! Answers to your questions can be found in documentation, Stack Overflow, etc. Being able to search for, read, and implement documentation is an important life skill for any data scientist. \n\nWith that, we will move on to Pandas II.\n\n",
    "supporting": [
      "pandas_1_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
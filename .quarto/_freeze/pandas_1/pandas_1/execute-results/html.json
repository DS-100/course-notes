{
  "hash": "4b9fcfcc2aec22cacd5c3893bfdc0ba0",
  "result": {
    "markdown": "---\ntitle: Pandas I\nformat:\n  html:\n    toc: true\n    toc-depth: 5\n    toc-location: right\n    code-fold: false\n    theme:\n      - cosmo\n      - cerulean\n    callout-icon: false\n---\n\n::: {.callout-note collapse=\"true\"}\n## Learning Outcomes\n\n- Build familiarity with basic `pandas` syntax\n- Learn the methods of selecting and filtering data from a DataFrame.\n- Understand the differences between DataFrames and Series\n:::\n\nData scientists work with data stored in a variety of formats. The primary focus of this class is in understanding tabular data -- one of the most widely used formats in data science. This note introduces DataFrames, which are among the most popular representations of tabular data. Weâ€™ll also introduce `pandas`, the standard Python package for manipulating data in DataFrames.\n\n## Introduction to Exploratory Data Analysis\n\nImagine you collected, or have been given a box of data. What do you do next? \n\n<img src=\"images/understand_data.png\" alt='understand_data' width='500'>\n\nThe first step is to clean your data. **Data cleaning** often corrects issues in the structure and formatting of data, including missing values and unit conversions.\n\nData scientists have coined the term **exploratory data analysis (EDA)** to describe the process of transforming raw data to insightful observations. EDA is an *open-ended* analysis of transforming, visualizing, and summarizing patterns in data. In order to conduct EDA, we first need to familiarize ourselves with `pandas` -- an important programming tool.\n\n## Introduction to Pandas\n\n`pandas` is a data analysis library to make data cleaning and analysis fast and convenient in Python. \n\nThe `pandas` library adopts many coding idioms from `NumPy`. The biggest difference is that `pandas` is designed for working with tabular data, one of the most common data formats (and the focus of Data 100).\n\nBefore writing any code, we must import `pandas` into our Python environment.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\n# `pd` is the conventional alias for Pandas, as `np` is for NumPy\nimport pandas as pd\n```\n:::\n\n\n## Series, DataFrames, and Indices\n\nThere are three fundamental data structures in `pandas`:\n\n1. **Series**: 1D labeled array data; best thought of as columnar data\n2. **DataFrame**: 2D tabular data with rows and columns\n3. **Index**: A sequence of row/column labels\n\nDataFrames, Series, and Indices can be represented visually in the following diagram.\n\n![](images/df_series_index.png)\n\nNotice how the **DataFrame** is a two dimensional object -- it contains both rows and columns. The **Series** above is a singular column of this DataFrame, namely the `Candidate` column. Both contain an **Index**, or a shared list of row labels (the integers from 0 to 5, inclusive).\n\n### Series\n\nA Series represents a column of a DataFrame; more generally, it can be any 1-dimensional array-like object containing values of the same type with associated data labels, called its index.\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\n\ns = pd.Series([-1, 10, 2])\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0    -1\n1    10\n2     2\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ns.array # Data contained within the Series\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n<PandasArray>\n[-1, 10, 2]\nLength: 3, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ns.index # The Index of the Series\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nRangeIndex(start=0, stop=3, step=1)\n```\n:::\n:::\n\n\nBy default, row indices in `pandas` are a sequential list of integers beginning from 0. Optionally, a list of desired indices can be passed to the `index` argument.\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ns = pd.Series([-1, 10, 2], index = [\"a\", \"b\", \"c\"])\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na    -1\nb    10\nc     2\ndtype: int64\n```\n:::\n:::\n\n\nIndices can also be changed after initialization.\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ns.index = [\"first\", \"second\", \"third\"]\nprint(s)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nfirst     -1\nsecond    10\nthird      2\ndtype: int64\n```\n:::\n:::\n\n\n#### Selection in Series\n\nSimilar to an array, we can select a single value or a set of values from a Series. There are 3 primary methods of selecting data.\n\n1. A single index label\n2. A list of index labels\n3. A filtering condition\n\nLet's define the following Series `ser`.\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nser = pd.Series([4, -2, 0, 6], index = [\"a\", \"b\", \"c\", \"d\"])\nprint(ser)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na    4\nb   -2\nc    0\nd    6\ndtype: int64\n```\n:::\n:::\n\n\n##### A Single Index Label\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprint(ser[\"a\"]) # Notice how the return value is a single array element\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n4\n```\n:::\n:::\n\n\n##### A List of Index Labels\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nser[[\"a\", \"c\"]] # Notice how the return value is another Series\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\na    4\nc    0\ndtype: int64\n```\n:::\n:::\n\n\n##### A Filtering Condition\n\nPerhaps the most interesting (and useful) method of selecting data from a Series is with a filtering condition. \n\nWe first must apply a vectorized boolean operation to our Series that encodes the filter conditon.\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nser > 0 # Filter condition: select all elements greater than 0\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\na     True\nb    False\nc    False\nd     True\ndtype: bool\n```\n:::\n:::\n\n\nUpon \"indexing\" in our Series with this condition, `pandas` selects only the rows with `True` values.\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nser[ser > 0] \n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\na    4\nd    6\ndtype: int64\n```\n:::\n:::\n\n\n### DataFrames\n\nIn Data 8, you encountered the `Table` class of the `datascience` library, which represented tabular data. In Data 100, we'll be using the `DataFrame` class of the `pandas` library.\n\nHere is an example of a DataFrame that contains election data.\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nimport pandas as pd\n\nelections = pd.read_csv(\"data/elections.csv\")\nelections.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's dissect the code above. \n\n1. We first import the ````pandas```` library into our Python environment, using the alias `pd`. <br> &emsp;```` import pandas as pd ````\n\n2. There are a number of ways to read data into a DataFrame. In Data 100, our data are typically stored in a CSV (comma-seperated values) file format. We can import a CSV file into a DataFrame by passing the data path as an argument to the following ````pandas```` function. \n<br> &emsp;```` pd.read_csv(\"elections.csv\") ```` \n\nThis code stores our DataFrame object in the ````elections```` variable. Upon inspection, our ````elections```` DataFrame has 182 rows and 6 columns (`Year`, `Candidate`, `Party`, `Popular Vote`, `Result`, `%`). Each row represents a single record -- in our example, a presedential candidate from some particular year. Each column represents a single attribute, or feature of the record.\n\nIn the example above, we constructed a DataFrame object using data from a CSV file. As we'll explore in the next section, we can create a DataFrame with data of our own.\n\n#### Creating a DataFrame\n\nThere are many ways to create a DataFrame. Here, we will cover the most popular approaches.\n\n1. Using a list and column names\n2. From a dictionary\n3. From a Series\n\n##### Using a List and Column Names\n\nConsider the following examples.\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndf_list = pd.DataFrame([1, 2, 3], columns=[\"Numbers\"])\ndf_list\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Numbers</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe first code cell creates a DataFrame with a single column `Numbers`, while the second creates a DataFrame with an additional column `Description`. Notice how a 2D list of values is required to initialize the second DataFrame -- each nested list represents a single row of data.\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf_list = pd.DataFrame([[1, \"one\"], [2, \"two\"]], columns = [\"Number\", \"Description\"])\ndf_list\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Number</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>one</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>two</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##### From a Dictionary\n\nA second (and more common) way to create a DataFrame is with a dictionary. The dictionary keys represent the column names, and the dictionary values represent the column values.\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf_dict = pd.DataFrame({\"Fruit\": [\"Strawberry\", \"Orange\"], \"Price\": [5.49, 3.99]})\ndf_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Fruit</th>\n      <th>Price</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Strawberry</td>\n      <td>5.49</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Orange</td>\n      <td>3.99</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n##### From a Series\n\nEarlier, we explained how a Series was synonymous to a column in a DataFrame. It follows then, that a DataFrame is equivalent to a collection of Series, which all share the same index. \n\nIn fact, we can initialize a DataFrame by merging two or more Series.\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# Notice how our indices, or row labels, are the same\n\ns_a = pd.Series([\"a1\", \"a2\", \"a3\"], index = [\"r1\", \"r2\", \"r3\"])\ns_b = pd.Series([\"b1\", \"b2\", \"b3\"], index = [\"r1\", \"r2\", \"r3\"])\n\npd.DataFrame({\"A-column\": s_a, \"B-column\": s_b})\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A-column</th>\n      <th>B-column</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>r1</th>\n      <td>a1</td>\n      <td>b1</td>\n    </tr>\n    <tr>\n      <th>r2</th>\n      <td>a2</td>\n      <td>b2</td>\n    </tr>\n    <tr>\n      <th>r3</th>\n      <td>a3</td>\n      <td>b3</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Indices\n\nThe major takeaway: we can think of a **DataFrame** as a collection of **Series** that all share the same **Index**.\n\nOn a more technical note, an Index doesn't have to be an integer, nor does it have to be unique. For example, we can set the index of the `elections` Dataframe to be the name of presedential candidates. Selecting a new Series from this modified DataFrame yields the following.\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# This sets the index to the \"Candidate\" column\nelections.set_index(\"Candidate\", inplace=True)\n```\n:::\n\n\n![](images/index_comparison_2.png)\n\nTo retrieve the indices of a DataFrame, simply use the `.index` attribute of the DataFrame class.\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nelections.head().index\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nIndex(['Andrew Jackson', 'John Quincy Adams', 'Andrew Jackson',\n       'John Quincy Adams', 'Andrew Jackson'],\n      dtype='object', name='Candidate')\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\n# This resets the index to be the default list of integers\nelections.reset_index(inplace=True) \n```\n:::\n\n\n## Slicing in DataFrames\n\nNow that we've learned how to create DataFrames, let's dive deeper into their capabilities. \n\nThe API (application programming interface) for the DataFrame class is enormous. In this section, we'll discuss several methods of the DataFrame API that allow us to extract subsets of data.\n\nThe simplest way to manipulate a DataFrame is to extract a subset of rows and columns, known as **slicing**. We will do so with three primary methods of the DataFrame class:\n\n1. `.loc`\n2. `.iloc`\n3. `[]`\n\n### Indexing with .loc\n\nThe `.loc` operator selects rows and columns in a DataFrame by their row and column label(s), respectively. The **row labels** (commonly referred to as the **indices**) are the bold text on the far *left* of a DataFrame, while the **column labels** are the column names found at the *top* of a DataFrame.\n\nTo grab data with `.loc`, we must specify the row and column label(s) where the data exists. The row labels are the first argument to the `.loc` function; the column labels are the second. For example, we can select the the row labeled `0` and the column labeled `Candidate` from the `elections` DataFrame.\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\nelections.loc[0, 'Candidate']\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n'Andrew Jackson'\n```\n:::\n:::\n\n\nTo select *multiple* rows and columns, we can use Python slice notation. Here, we select both the first four rows and columns.\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\nelections.loc[0:3, 'Year':'Popular vote']\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSuppose that instead, we wanted *every* column value for the first four rows in the `elections` DataFrame. The shorthand `:` is useful for this.\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nelections.loc[0:3, :]\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Andrew Jackson</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>John Quincy Adams</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>John Quincy Adams</td>\n      <td>1828</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThere are a couple of things we should note. Unlike conventional Python, Pandas allows us to slice string values (in our example, the column labels). Secondly, slicing with `.loc` is *inclusive*. Notice how our resulting DataFrame includes every row and column between and including the slice labels we specified.\n\nEquivalently, we can use a list to obtain multiple rows and columns in our `elections` DataFrame. \n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nelections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']]\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLastly, we can interchange list and slicing notation.\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nelections.loc[[0, 1, 2, 3], :]\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Andrew Jackson</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>John Quincy Adams</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>John Quincy Adams</td>\n      <td>1828</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Indexing with .iloc\n\nSlicing with `.iloc` works similarily to `.loc`, although `.iloc` uses the integer positions of rows and columns rather the labels. The arguments to the `.iloc` function also behave similarly - single values, lists, indices, and any combination of these are permitted. \n\nLet's begin reproducing our results from above. We'll begin by selecting for the first presedential candidate in our `elections` DataFrame:\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\n# elections.loc[0, \"Candidate\"] - Previous approach\nelections.iloc[0, 1]\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n1824\n```\n:::\n:::\n\n\nNotice how the first argument to both `.loc` and `.iloc` are the same. This is because the row with a label of 0 is conveniently in the 0^th^ (or first) position of the `elections` DataFrame. Generally, this is true of any DataFrame where the row labels are incremented in ascending order from 0.\n\nHowever, when we select the first four rows and columns using `.iloc`, we notice something.\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\n# elections.loc[0:3, 'Year':'Popular vote'] - Previous approach\nelections.iloc[0:4, 0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Andrew Jackson</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>John Quincy Adams</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>John Quincy Adams</td>\n      <td>1828</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nSlicing is no longer inclusive in `.iloc` - it's *exclusive*. This is one of Pandas syntatical subtleties; you'll get used to with practice.\n\nList behavior works just as expected.\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\n#elections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']] - Previous Approach\nelections.iloc[[0, 1, 2, 3], [0, 1, 2, 3]]\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Andrew Jackson</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>John Quincy Adams</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>John Quincy Adams</td>\n      <td>1828</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThis discussion begs the question: when should we use `.loc` vs `.iloc`? In most cases, `.loc` is generally safer to use. You can imagine `.iloc` may return incorrect values when applied to a dataset where the ordering of data can change. \n\n### Indexing with []\n\nThe `[]` selection operator is the most baffling of all, yet the commonly used. It only takes a single argument, which may be one of the following:\n\n1. A slice of row numbers\n2. A list of column labels\n3. A single column label\n\nThat is, `[]` is *context dependent*. Let's see some examples.\n\n#### A slice of row numbers\n\nSay we wanted the first four rows of our `elections` DataFrame.\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nelections[0:4]\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Candidate</th>\n      <th>Year</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Andrew Jackson</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>John Quincy Adams</td>\n      <td>1824</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Andrew Jackson</td>\n      <td>1828</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>John Quincy Adams</td>\n      <td>1828</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### A list of column labels\n\nSuppose we now want the first four columns.\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nelections[[\"Year\", \"Candidate\", \"Party\", \"Popular vote\"]].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n#### A single column label\n\nLastly, if we only want the `Candidate` column.\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nelections[\"Candidate\"].head()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\n0       Andrew Jackson\n1    John Quincy Adams\n2       Andrew Jackson\n3    John Quincy Adams\n4       Andrew Jackson\nName: Candidate, dtype: object\n```\n:::\n:::\n\n\nThe output looks like a Series! In this course, we'll become very comfortable with `[]`, especially for selecting columns. In practice, `[]` is much more common than `.loc`.\n\n## Parting Note\n\nThe `pandas` library is enormous and contains many useful functions. Here is a link to [documentation](https://pandas.pydata.org/docs/).\n\nThe introductory `pandas` lectures will cover important data structures and methods you should be fluent in. However, we want you to get familiar with the real world programming practice of ...Googling! Answers to your questions can be found in documentation, Stack Overflow, etc. \n\nWith that, let's move on to Pandas II.\n\n",
    "supporting": [
      "pandas_1_files\\figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
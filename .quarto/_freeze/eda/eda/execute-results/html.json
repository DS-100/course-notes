{
  "hash": "0b0c7c510bd5abca61e48d701ab29975",
  "result": {
    "markdown": "---\ntitle: Data Cleaning and EDA\nexecute:\n  echo: true\nformat:\n  html:\n    code-fold: true\n    code-tools: true\n    toc: true\n    toc-title: Data Cleaning and EDA\n    page-layout: full\n    theme:\n      - cosmo\n      - cerulean\n---\n\nIn the past few lectures, we've learned that `pandas` is a toolkit to restructure, modify, and explore a dataset. What we haven't yet touched on is *how* to make these data transformation decisions. When we receive a new set of data from the \"real world,\" how do we know what processing we should do to convert this data into a usable form?\n\n**Data cleaning**, also called **data wrangling**, is the process of transforming raw data to facilitate subsequent analysis. It is often used to address issues like:\n\n* Unclear structure or formatting\n* Missing or corrupted values\n* Unit conversions\n* ...and so on\n\n**Exploratory data analysis (EDA)** is the process of understanding a new dataset. It is an open-ended, informal analysis that involves familiarizing ourselves with the variables present in the data, discovering potential hypotheses, and identifying potential issues with the data. This last point can often motivate further data cleaning to address any problems with the dataset's format; because of this, EDA and data cleaning are often thought of as an \"infinite loop,\" with each process driving the other.\n\nIn this lecture, we will consider the key properties of data to consider when performing data cleaning and EDA. In doing so, we'll develop a \"checklist\" of sorts for you to consider when approaching a new dataset. Throughout this process, we'll build a deeper understanding of this early (but very important!) stage of the data science lifecycle.\n\n## Structure\n\n### File Format\nIn the past two `pandas` lectures, we briefly touched on the idea of file format: the way data is encoded in a file for storage. Specifically, our `elections` and `babynames` datasets were stored and loaded as CSVs:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"false\"}\nimport pandas as pd\npd.read_csv(\"data/elections.csv\").head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year</th>\n      <th>Candidate</th>\n      <th>Party</th>\n      <th>Popular vote</th>\n      <th>Result</th>\n      <th>%</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1824</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic-Republican</td>\n      <td>151271</td>\n      <td>loss</td>\n      <td>57.210122</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1824</td>\n      <td>John Quincy Adams</td>\n      <td>Democratic-Republican</td>\n      <td>113142</td>\n      <td>win</td>\n      <td>42.789878</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1828</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>642806</td>\n      <td>win</td>\n      <td>56.203927</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1828</td>\n      <td>John Quincy Adams</td>\n      <td>National Republican</td>\n      <td>500897</td>\n      <td>loss</td>\n      <td>43.796073</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1832</td>\n      <td>Andrew Jackson</td>\n      <td>Democratic</td>\n      <td>702735</td>\n      <td>win</td>\n      <td>54.574789</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nCSVs, which stand for **comma-separated values**, are a common tabular data format. To better understand the properties of a CSV, let's take a look at the raw data file to see what it looks like before being loaded into a DataFrame. \n\n::: {.cell execution_count=2}\n\n::: {.cell-output .cell-output-stdout}\n```\nYear,Candidate,Party,Popular vote,Result,%\n\n1824,Andrew Jackson,Democratic-Republican,151271,loss,57.21012204\n\n1824,John Quincy Adams,Democratic-Republican,113142,win,42.78987796\n\n1828,Andrew Jackson,Democratic,642806,win,56.20392707\n\n```\n:::\n:::\n\n\nEach row, or **record**, in the data is delimited by a newline. Each column, or **field**, in the data is delimited by a comma (hence, comma-separated!). \n\nAnother common file type is the **TSV (tab-separated values)**. In a TSV, records are still delimited by a newline, while fields are delimited by `\\t` tab character. A TSV can be loaded into `pandas` using `pd.read_csv()` with the `delimiter` parameter: `pd.read_csv(\"file_name.tsv\", delimiter=\"\\t\")`. A raw TSV file is shown below.\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-stdout}\n```\n﻿Year\tCandidate\tParty\tPopular vote\tResult\t%\n\n1824\tAndrew Jackson\tDemocratic-Republican\t151271\tloss\t57.21012204\n\n1824\tJohn Quincy Adams\tDemocratic-Republican\t113142\twin\t42.78987796\n\n1828\tAndrew Jackson\tDemocratic\t642806\twin\t56.20392707\n\n```\n:::\n:::\n\n\n**JSON (JavaScript Object Notation)** files behave similarly to Python dictionaries. They can be loaded into `pandas` using `pd.read_json`. A raw JSON is shown below.\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-stdout}\n```\n[\n\n {\n\n   \"Year\": 1824,\n\n   \"Candidate\": \"Andrew Jackson\",\n\n   \"Party\": \"Democratic-Republican\",\n\n   \"Popular vote\": 151271,\n\n   \"Result\": \"loss\",\n\n   \"%\": 57.21012204\n\n },\n\n```\n:::\n:::\n\n\n### Variable Types\n\nAfter loading data into a file, it's a good idea to take the time to understand what pieces of information are encoded in the dataset. In particular, we want to identify what variable types are present in our data. Broadly speaking, we can categorize variables into one of two overarching types. \n\n**Quantitative variables** describe some numeric quantity or amount. We can sub-divide quantitative data into:\n\n* **Continuous quantitative variables**: numeric data that can be measured on a continuous scale to arbitrary precision. Continuous variables do not have a strict set of possible values – they can be recorded to any number of decimal places. For example, weights, GPA, or CO<sub>2</sub> concentrations\n* **Discrete quantitative variables**: numeric data that can only take on a finite set of possible values. For example, someone's age or number of siblings.\n\n**Qualitative variables**, also known as **categorical variables**, describe data that isn't measuring some quantity or amount. The sub-categories of categorical data are:\n\n* **Ordinal qualitative variables**: categories with ordered levels. Specifically, ordinal variables are those where the difference between levels has no consistent, quantifiable meaning. For example, a Yelp rating or set of income brackets. \n* **Nominal qualitative variables**: categories with no specific order. For example, someone's political affiliation or Cal ID number.\n\n<img src=\"images/variable.png\" alt='variable' width='600'>\n\n### Primary and Foreign Keys\n\nLast time, we introduced `.merge` as the `pandas` method for joining multiple DataFrames together. In our discussion of joins, we touched on the idea of using a \"key\" to determine what rows should be merged from each table. Let's take a moment to examine this idea more closely.\n\nThe **primary key** is the column or set of columns in a table that determine the values of the remaining columns. It can be thought of as the unique identifier for each individual row in the table. For example, a table of Data 100 students might use each student's Cal ID as the primary key. \n\n::: {.cell execution_count=5}\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Cal ID</th>\n      <th>Name</th>\n      <th>Major</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3034619471</td>\n      <td>Oski</td>\n      <td>Data Science</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3035619472</td>\n      <td>Ollie</td>\n      <td>Computer Science</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3025619473</td>\n      <td>Orrie</td>\n      <td>Data Science</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3046789372</td>\n      <td>Ollie</td>\n      <td>Economics</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe **foreign key** is the column or set of columns in a table that reference primary keys in other tables. Knowing a dataset's foreign keys can be useful when assigning the `left_on` and `right_on` parameters of `.merge`. In the table of office hour tickets below, `\"Cal ID\"` is a foreign key referencing the previous table.\n\n::: {.cell execution_count=6}\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>OH Request #</th>\n      <th>Cal ID</th>\n      <th>Question</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>3034619471</td>\n      <td>HW 2 Q1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>3035619472</td>\n      <td>HW 2 Q3</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>3025619473</td>\n      <td>Lab 3 Q4</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>3035619472</td>\n      <td>HW 2 Q7</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Granularity, Scope, and Temporality\n\nAfter understanding the structure of the dataset, the next task is to determine what exactly the data represents. We'll do so by considering the data's granularity, scope, and temporality.\n\nThe **granularity** of a dataset is the level of detail included in the data. To determine the data's granularity, ask: what does each row in the dataset represent? Fine-grained data contains a high level of detail, with a single row representing a small individual unit. For example, each record may represent one person. Coarse-grained data is encoded such that a single row represents a large individual unit – for example, each record may represent a group of people.\n\nThe **scope** of a dataset is the subset of the population covered by the data. If we were investigating student performance in Data Science courses, a dataset with narrow scope might encompass all students enrolled in Data 100; a dataset with expansive scope might encompass all students in California. \n\nThe **temporality** of a dataset describes the time period over which the data was collected. To fully understand the temporality of the data, it may be necessary to standardize timezones or inspect recurring time-based trends in the data (Do patterns recur in 24-hour patterns? Over the course of a month? Seasonally?).\n\n## Faithfulness\n\nAt this stage in our data wangling and EDA workflow, we've achieved quite a lot: we've identified how our data is structured, come to terms with what information it encodes, and gained insight as to how it was generated. Throughout this process, we should always recall the original intent of our work in Data Science – to use data to better understand and model the real world. To achieve this goal, we need to ensure that the data we use is faithful to reality; that is, that our data accurately captures the \"real world.\"\n\nData used in research or industry is often \"messy\" – there may be errors or inaccuracies that impact the faithfulness of the dataset. Signs that data may not be faithful include:\n\n* Unrealistic or \"incorrect\" values, such as negative counts, locations that don't exist, or dates set in the future\n* Violations of obvious dependencies, like an age that does not match a birthday\n* Clear signs that data was entered by hand, which can lead to spelling errors or fields that are incorrectly shifted\n* Signs of data falsification, such as fake email addresses or repeated use of the same names\n* Duplicated records or fields containing the same information\n\nA common issue encountered with real-world datasets is that of missing data. One strategy to resolve this is to simply drop any records with missing values from the dataset. This does, however, introduce the risk of inducing biases – it is possible that the missing or corrupt records may be systemically related to some feature of interest in the data.\n\nAnother method to address missing data is to perform **imputation**: infer the missing values using other data available in the dataset. There is a wide variety of imputation techniques that can be implemented; some of the most common are listed below.\n\n* Average imputation: replace missing values with the average value for that field\n* Hot deck imputation: replace missing values with some random value\n* Regression imputation: develop a model to predict missing values\n* Multiple imputation: replace missing values with multiple random values\n\nRegardless of the strategy used to deal with missing data, we should think carefully about *why* particular records or fields may be missing – this can help inform whether or not the absence of these values is signficant in some meaningful way.\n\n",
    "supporting": [
      "eda_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}
[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Principles and Techniques of Data Science",
    "section": "",
    "text": "Welcome"
  },
  {
    "objectID": "index.html#about-the-course-notes",
    "href": "index.html#about-the-course-notes",
    "title": "Principles and Techniques of Data Science",
    "section": "About the Course Notes",
    "text": "About the Course Notes\nThis text offers supplementary resources to accompany lectures presented in the Spring 2024 Edition of the UC Berkeley course Data 100: Principles and Techniques of Data Science.\nNew notes will be added each week to accompany live lectures. See the full calendar of lectures on the course website.\nIf you spot any typos or would like to suggest any changes, please fill out the Data 100 Content Feedback Form (Spring 2024). Note that this link will only work if you have an @berkeley.edu email address. If you’re not a student at Berkeley and would like to provide feedback, please email us at data100.instructors@berkeley.edu."
  },
  {
    "objectID": "inference_causality/inference_causality.html#parameter-inference-interpreting-regression-coefficients",
    "href": "inference_causality/inference_causality.html#parameter-inference-interpreting-regression-coefficients",
    "title": "19  Causal Inference and Confounding",
    "section": "19.1 Parameter Inference: Interpreting Regression Coefficients",
    "text": "19.1 Parameter Inference: Interpreting Regression Coefficients\nThere are two main reasons why we build models:\n\nPrediction: using our model to make accurate predictions about unseen data\nInference: using our model to draw conclusions about the underlying relationship(s) between our features and response. We want to understand the complex phenomena occurring in the world we live in. While training is the process of fitting a model, inference is the process of making predictions.\n\nRecall the framework we established in the last lecture. The relationship between datapoints is given by \\(Y = g(x) + \\epsilon\\), where \\(g(x)\\) is the true underlying relationship, and \\(\\epsilon\\) represents randomness. If we assume \\(g(x)\\) is linear, we can express this relationship in terms of the unknown, true model parameters \\(\\theta\\).\n\\[f_{\\theta}(x) = g(x) + \\epsilon = \\theta_0 + \\theta_1 x_1 + \\ldots + \\theta_p x_p + \\epsilon\\]\nOur model attempts to estimate each true population parameter \\(\\theta_i\\) using the sample estimates \\(\\hat{\\theta}_i\\) calculated from the design matrix \\(\\Bbb{X}\\) and response vector \\(\\Bbb{Y}\\).\n\\[f_{\\hat{\\theta}}(x) = \\hat{\\theta}_0 + \\hat{\\theta}_1 x_1 + \\ldots + \\hat{\\theta}_p x_p\\]\nLet’s pause for a moment. At this point, we’re very used to working with the idea of a model parameter. But what exactly does each coefficient \\(\\theta_i\\) actually mean? We can think of each \\(\\theta_i\\) as a slope of the linear model. If all other variables are held constant, a unit change in \\(x_i\\) will result in a \\(\\theta_i\\) change in \\(f_{\\theta}(x)\\). Broadly speaking, a large value of \\(\\theta_i\\) means that the feature \\(x_i\\) has a large effect on the response; conversely, a small value of \\(\\theta_i\\) means that \\(x_i\\) has little effect on the response. In the extreme case, if the true parameter \\(\\theta_i\\) is 0, then the feature \\(x_i\\) has no effect on \\(Y(x)\\).\nIf the true parameter \\(\\theta_i\\) for a particular feature is 0, this tells us something pretty significant about the world: there is no underlying relationship between \\(x_i\\) and \\(Y(x)\\)! But how can we test if a parameter is actually 0? As a baseline, we go through our usual process of drawing a sample, using this data to fit a model, and computing an estimate \\(\\hat{\\theta}_i\\). However, we also need to consider that if our random sample comes out differently, we may find a different result for \\(\\hat{\\theta}_i\\). To infer if the true parameter \\(\\theta_i\\) is 0, we want to draw our conclusion from the distribution of \\(\\hat{\\theta}_i\\) estimates we could have drawn across all other random samples. This is where hypothesis testing comes in handy!\nTo test if the true parameter \\(\\theta_i\\) is 0, we construct a hypothesis test where our null hypothesis states that the true parameter \\(\\theta_i\\) is 0, and the alternative hypothesis states that the true parameter \\(\\theta_i\\) is not 0. If our p-value is smaller than our cutoff value (usually p = 0.05), we reject the null hypothesis in favor of the alternative hypothesis."
  },
  {
    "objectID": "inference_causality/inference_causality.html#review-bootstrap-resampling",
    "href": "inference_causality/inference_causality.html#review-bootstrap-resampling",
    "title": "19  Causal Inference and Confounding",
    "section": "19.2 Review: Bootstrap Resampling",
    "text": "19.2 Review: Bootstrap Resampling\nTo determine the properties (e.g., variance) of the sampling distribution of an estimator, we’d need access to the population. Ideally, we’d want to consider all possible samples in the population, compute an estimate for each sample, and study the distribution of those estimates.\n\n\n\nHowever, this can be quite expensive and time-consuming. Even more importantly, we don’t have access to the population —— we only have one random sample from the population. How can we consider all possible samples if we only have one?\nBootstrapping comes in handy here! With bootstrapping, we treat our random sample as a “population” and resample from it with replacement. Intuitively, a random sample resembles the population (if it is big enough), so a random resample also resembles a random sample of the population. When sampling, there are a couple things to keep in mind:\n\nWe need to sample the same way we constructed the original sample. Typically, this involves taking a simple random sample with replacement.\nNew samples must be the same size as the original sample. We need to accurately model the variability of our estimates.\n\n\n\n\n\n\n\nWhy must we resample with replacement?\n\n\n\n\n\nGiven an original sample of size \\(n\\), we want a resample that has the same size \\(n\\) as the original. Sampling without replacement will give us the original sample with shuffled rows. Hence, when we calculate summary statistics like the average, our sample without replacement will always have the same average as the original sample, defeating the purpose of a bootstrap.\n\n\n\n\n\n\nBootstrap resampling is a technique for estimating the sampling distribution of an estimator. To execute it, we can follow the pseudocode below:\ncollect a random sample of size n (called the bootstrap population)\n\ninitiate a list of estimates\n\nrepeat 10,000 times:\n    resample with replacement from the bootstrap population\n    apply estimator f to the resample\n    store in list\n\nlist of estimates is the bootstrapped sampling distribution of f\nHow well does bootstrapping actually represent our population? The bootstrapped sampling distribution of an estimator does not exactly match the sampling distribution of that estimator, but it is often close. Similarly, the variance of the bootstrapped distribution is often close to the true variance of the estimator. The example below displays the results of different bootstraps from a known population using a sample size of \\(n=50\\).\n\n\n\nIn the real world, we don’t know the population distribution. The center of the bootstrapped distribution is the estimator applied to our original sample, so we have no way of understanding the estimator’s true expected value; the center and spread of our bootstrap are approximations. The quality of our bootstrapped distribution also depends on the quality of our original sample. If our original sample was not representative of the population (like Sample 5 in the image above), then the bootstrap is next to useless. In general, bootstrapping works better for large samples, when the population distribution is not heavily skewed (no outliers), and when the estimator is “low variance” (insensitive to extreme values).\n\n\nAlthough our bootstrapped sample distribution does not exactly match the sampling distribution of the population, we can see that it is relatively close. This demonstrates the benefit of bootstrapping —— without knowing the actual population distribution, we can still roughly approximate the true slope for the model by using only a single random sample of 20 cars."
  },
  {
    "objectID": "inference_causality/inference_causality.html#collinearity",
    "href": "inference_causality/inference_causality.html#collinearity",
    "title": "19  Causal Inference and Confounding",
    "section": "19.3 Collinearity",
    "text": "19.3 Collinearity\n\n19.3.1 Hypothesis Testing Through Bootstrap: Snowy Plover Demo\nWe can conduct the hypothesis testing described earlier through bootstrapping (this equivalence can be proven through the duality argument, which is out of scope for this class). We use bootstrapping to compute approximate 95% confidence intervals for each \\(\\theta_i\\). If the interval doesn’t contain 0, we reject the null hypothesis at the p=5% level. Otherwise, the data is consistent with the null, as the true parameter could possibly be 0.\nTo show an example of this hypothesis testing process, we’ll work with the snowy plover dataset throughout this section. The data are about the eggs and newly hatched chicks of the Snowy Plover. The data were collected at the Point Reyes National Seashore by a former student at Berkeley. Here’s a parent bird and some eggs.\n\n\n\nNote that Egg Length and Egg Breadth (widest diameter) are measured in millimeters, and Egg Weight and Bird Weight are measured in grams. For reference, a standard paper clip weighs about one gram.\n\n\nCode\nimport pandas as pd\neggs = pd.read_csv(\"data/snowy_plover.csv\")\neggs.head(5)\n\n\n\n\n\n\n\n\n\negg_weight\negg_length\negg_breadth\nbird_weight\n\n\n\n\n0\n7.4\n28.80\n21.84\n5.2\n\n\n1\n7.7\n29.04\n22.45\n5.4\n\n\n2\n7.9\n29.36\n22.48\n5.6\n\n\n3\n7.5\n30.10\n21.71\n5.3\n\n\n4\n8.3\n30.17\n22.75\n5.9\n\n\n\n\n\n\n\nOur goal will be to predict the weight of a newborn plover chick, which we assume follows the true relationship \\(Y = f_{\\theta}(x)\\) below.\n\\[\\text{bird\\_weight} = \\theta_0 + \\theta_1 \\text{egg\\_weight} + \\theta_2 \\text{egg\\_length} + \\theta_3 \\text{egg\\_breadth} + \\epsilon\\]\nNote that for each \\(i\\), the parameter \\(\\theta_i\\) is a fixed number, but it is unobservable. We can only estimate it. The random error \\(\\epsilon\\) is also unobservable, but it is assumed to have expectation 0 and be independent and identically distributed across eggs.\nSay we wish to determine if the egg_weight impacts the bird_weight of a chick – we want to infer if \\(\\theta_1\\) is equal to 0.\nFirst, we define our hypotheses:\n\nNull hypothesis: the true parameter \\(\\theta_1\\) is 0; any variation is due to random chance.\nAlternative hypothesis: the true parameter \\(\\theta_1\\) is not 0.\n\nNext, we use our data to fit a model \\(\\hat{Y} = f_{\\hat{\\theta}}(x)\\) that approximates the relationship above. This gives us the observed value of \\(\\hat{\\theta}_1\\) from our data.\n\nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\nX = eggs[[\"egg_weight\", \"egg_length\", \"egg_breadth\"]]\nY = eggs[\"bird_weight\"]\n\nmodel = LinearRegression()\nmodel.fit(X, Y)\n\n# This gives an array containing the fitted model parameter estimates\nthetas = model.coef_\n\n# Put the parameter estimates in a nice table for viewing\ndisplay(pd.DataFrame(\n  [model.intercept_] + list(model.coef_),\n  columns=['theta_hat'],\n  index=['intercept', 'egg_weight', 'egg_length', 'egg_breadth']\n))\n\nprint(\"RMSE\", np.mean((Y - model.predict(X)) ** 2))\n\n\n\n\n\n\n\n\ntheta_hat\n\n\n\n\nintercept\n-4.605670\n\n\negg_weight\n0.431229\n\n\negg_length\n0.066570\n\n\negg_breadth\n0.215914\n\n\n\n\n\n\n\nRMSE 0.04547085380275766\n\n\nOur single sample of data gives us the value of \\(\\hat{\\theta}_1=0.431\\). To get a sense of how this estimate might vary if we were to draw different random samples, we will use bootstrapping. As a refresher, to construct a bootstrap sample, we will draw a resample from the collected data that:\n\nHas the same sample size as the collected data\nIs drawn with replacement (this ensures that we don’t draw the exact same sample every time!)\n\nWe draw a bootstrap sample, use this sample to fit a model, and record the result for \\(\\hat{\\theta}_1\\) on this bootstrapped sample. We then repeat this process many times to generate a bootstrapped empirical distribution of \\(\\hat{\\theta}_1\\). This gives us an estimate of what the true distribution of \\(\\hat{\\theta}_1\\) across all possible samples might look like.\n\n# Set a random seed so you generate the same random sample as staff\n# In the \"real world\", we wouldn't do this\nimport numpy as np\nnp.random.seed(1337)\n\n# Set the sample size of each bootstrap sample\nn = len(eggs)\n\n# Create a list to store all the bootstrapped estimates\nestimates = []\n\n# Generate a bootstrap resample from `eggs` and find an estimate for theta_1 using this sample. \n# Repeat 10000 times.\nfor i in range(10000):\n    # draw a bootstrap sample\n    bootstrap_resample = eggs.sample(n, replace=True)\n    X_bootstrap = bootstrap_resample[[\"egg_weight\", \"egg_length\", \"egg_breadth\"]]\n    Y_bootstrap = bootstrap_resample[\"bird_weight\"]\n    \n    # use bootstrapped sample to fit a model\n    bootstrap_model = LinearRegression()\n    bootstrap_model.fit(X_bootstrap, Y_bootstrap)\n    bootstrap_thetas = bootstrap_model.coef_\n    \n    # record the result for theta_1\n    estimates.append(bootstrap_thetas[0])\n    \n# calculate the 95% confidence interval \nlower = np.percentile(estimates, 2.5, axis=0)\nupper = np.percentile(estimates, 97.5, axis=0)\nconf_interval = (lower, upper)\nconf_interval\n\n(-0.25864811956848754, 1.1034243854204049)\n\n\nOur bootstrapped 95% confidence interval for \\(\\theta_1\\) is \\([-0.259, 1.103]\\). Immediately, we can see that 0 is indeed contained in this interval – this means that we cannot conclude that \\(\\theta_1\\) is non-zero! More formally, we fail to reject the null hypothesis (that \\(\\theta_1\\) is 0) under a 5% p-value cutoff.\nWe can repeat this process to construct 95% confidence intervals for the other parameters of the model.\n\n\nCode\nnp.random.seed(1337)\n\ntheta_0_estimates = []\ntheta_1_estimates = []\ntheta_2_estimates = []\ntheta_3_estimates = []\n\n\nfor i in range(10000):\n    bootstrap_resample = eggs.sample(n, replace=True)\n    X_bootstrap = bootstrap_resample[[\"egg_weight\", \"egg_length\", \"egg_breadth\"]]\n    Y_bootstrap = bootstrap_resample[\"bird_weight\"]\n    \n    bootstrap_model = LinearRegression()\n    bootstrap_model.fit(X_bootstrap, Y_bootstrap)\n    bootstrap_theta_0 = bootstrap_model.intercept_\n    bootstrap_theta_1, bootstrap_theta_2, bootstrap_theta_3 = bootstrap_model.coef_\n    \n    theta_0_estimates.append(bootstrap_theta_0)\n    theta_1_estimates.append(bootstrap_theta_1)\n    theta_2_estimates.append(bootstrap_theta_2)\n    theta_3_estimates.append(bootstrap_theta_3)\n    \ntheta_0_lower, theta_0_upper = np.percentile(theta_0_estimates, 2.5), np.percentile(theta_0_estimates, 97.5)\ntheta_1_lower, theta_1_upper = np.percentile(theta_1_estimates, 2.5), np.percentile(theta_1_estimates, 97.5)\ntheta_2_lower, theta_2_upper = np.percentile(theta_2_estimates, 2.5), np.percentile(theta_2_estimates, 97.5)\ntheta_3_lower, theta_3_upper = np.percentile(theta_3_estimates, 2.5), np.percentile(theta_3_estimates, 97.5)\n\n# Make a nice table to view results\npd.DataFrame({\"lower\":[theta_0_lower, theta_1_lower, theta_2_lower, theta_3_lower], \"upper\":[theta_0_upper, \\\n                theta_1_upper, theta_2_upper, theta_3_upper]}, index=[\"theta_0\", \"theta_1\", \"theta_2\", \"theta_3\"])\n\n\n\n\n\n\n\n\n\nlower\nupper\n\n\n\n\ntheta_0\n-15.278542\n5.161473\n\n\ntheta_1\n-0.258648\n1.103424\n\n\ntheta_2\n-0.099138\n0.208557\n\n\ntheta_3\n-0.257141\n0.758155\n\n\n\n\n\n\n\nSomething’s off here. Notice that 0 is included in the 95% confidence interval for every parameter of the model. Using the interpretation we outlined above, this would suggest that we can’t say for certain that any of the input variables impact the response variable! This makes it seem like our model can’t make any predictions – and yet, each model we fit in our bootstrap experiment above could very much make predictions of \\(Y\\).\nHow can we explain this result? Think back to how we first interpreted the parameters of a linear model. We treated each \\(\\theta_i\\) as a slope, where a unit increase in \\(x_i\\) leads to a \\(\\theta_i\\) increase in \\(Y\\), if all other variables are held constant. It turns out that this last assumption is very important. If variables in our model are somehow related to one another, then it might not be possible to have a change in one of them while holding the others constant. This means that our interpretation framework is no longer valid! In the models we fit above, we incorporated egg_length, egg_breadth, and egg_weight as input variables. These variables are very likely related to one another – an egg with large egg_length and egg_breadth will likely be heavy in egg_weight. This means that the model parameters cannot be meaningfully interpreted as slopes.\nTo support this conclusion, we can visualize the relationships between our feature variables. Notice the strong positive association between the features.\n\n\nCode\nimport seaborn as sns\nsns.pairplot(eggs[[\"egg_length\", \"egg_breadth\", \"egg_weight\", 'bird_weight']]);\n\n\n/Users/Ishani/micromamba/lib/python3.9/site-packages/seaborn/axisgrid.py:118: UserWarning:\n\nThe figure layout has changed to tight\n\n\n\n\n\n\nThis issue is known as collinearity, sometimes also called multicollinearity. Collinearity occurs when one feature can be predicted fairly accurately by a linear combination of the other features, which happens when one feature is highly correlated with the others.\nWhy is collinearity a problem? Its consequences span several aspects of the modeling process:\n\nInference: Slopes can’t be interpreted for an inference task.\nModel Variance: If features strongly influence one another, even small changes in the sampled data can lead to large changes in the estimated slopes.\nUnique Solution: If one feature is a linear combination of the other features, the design matrix will not be full rank, and \\(\\mathbb{X}^{\\top}\\mathbb{X}\\) is not invertible. This means that least squares does not have a unique solution. See this section of Course Note 12 for more on this.\n\nThe take-home point is that we need to be careful with what features we select for modeling. If two features likely encode similar information, it is often a good idea to choose only one of them as an input variable.\n\n\n19.3.2 A Simpler Model\nLet us now consider a more interpretable model: we instead assume a true relationship using only egg weight:\n\\[f_\\theta(x) = \\theta_0 + \\theta_1 \\text{egg\\_weight} + \\epsilon\\]\n\n\nCode\nfrom sklearn.linear_model import LinearRegression\nX_int = eggs[[\"egg_weight\"]]\nY_int = eggs[\"bird_weight\"]\n\nmodel_int = LinearRegression()\n\nmodel_int.fit(X_int, Y_int)\n\n# This gives an array containing the fitted model parameter estimates\nthetas_int = model_int.coef_\n\n# Put the parameter estimates in a nice table for viewing\npd.DataFrame({\"theta_hat\":[model_int.intercept_, thetas_int[0]]}, index=[\"theta_0\", \"theta_1\"])\n\n\n\n\n\n\n\n\n\ntheta_hat\n\n\n\n\ntheta_0\n-0.058272\n\n\ntheta_1\n0.718515\n\n\n\n\n\n\n\n\n\nCode\nimport matplotlib.pyplot as plt\n\n# Set a random seed so you generate the same random sample as staff\n# In the \"real world\", we wouldn't do this\nnp.random.seed(1337)\n\n# Set the sample size of each bootstrap sample\nn = len(eggs)\n\n# Create a list to store all the bootstrapped estimates\nestimates_int = []\n\n# Generate a bootstrap resample from `eggs` and find an estimate for theta_1 using this sample. \n# Repeat 10000 times.\nfor i in range(10000):\n    bootstrap_resample_int = eggs.sample(n, replace=True)\n    X_bootstrap_int = bootstrap_resample_int[[\"egg_weight\"]]\n    Y_bootstrap_int = bootstrap_resample_int[\"bird_weight\"]\n    \n    bootstrap_model_int = LinearRegression()\n    bootstrap_model_int.fit(X_bootstrap_int, Y_bootstrap_int)\n    bootstrap_thetas_int = bootstrap_model_int.coef_\n    \n    estimates_int.append(bootstrap_thetas_int[0])\n\nplt.figure(dpi=120)\nsns.histplot(estimates_int, stat=\"density\")\nplt.xlabel(r\"$\\hat{\\theta}_1$\")\nplt.title(r\"Bootstrapped estimates $\\hat{\\theta}_1$ Under the Interpretable Model\");\n\n\n\n\n\nNotice how the interpretable model performs almost as well as our other model:\n\n\nCode\nfrom sklearn.metrics import mean_squared_error\n\nrmse = mean_squared_error(Y, model.predict(X))\nrmse_int = mean_squared_error(Y_int, model_int.predict(X_int))\nprint(f'RMSE of Original Model: {rmse}')\nprint(f'RMSE of Interpretable Model: {rmse_int}')\n\n\nRMSE of Original Model: 0.04547085380275766\nRMSE of Interpretable Model: 0.046493941375556846\n\n\nYet, the confidence interval for the true parameter \\(\\theta_{1}\\) does not contain zero.\n\n\nCode\nlower_int = np.percentile(estimates_int, 2.5)\nupper_int = np.percentile(estimates_int, 97.5)\n\nconf_interval_int = (lower_int, upper_int)\nconf_interval_int\n\n\n(0.6029335250209633, 0.8208401738546206)\n\n\nIn retrospect, it’s no surprise that the weight of an egg best predicts the weight of a newly-hatched chick.\nA model with highly correlated variables prevents us from interpreting how the variables are related to the prediction.\n\n\n19.3.3 Reminder: Assumptions Matter\nKeep the following in mind: All inference assumes that the regression model holds.\n\nIf the model doesn’t hold, the inference might not be valid.\nIf the assumptions of the bootstrap don’t hold…\n\nSample size n is large\nSample is representative of population distribution (drawn i.i.d., unbiased)\n\n…then the results of the bootstrap might not be valid."
  },
  {
    "objectID": "inference_causality/inference_causality.html#bonus-content",
    "href": "inference_causality/inference_causality.html#bonus-content",
    "title": "19  Causal Inference and Confounding",
    "section": "19.4 [Bonus Content]",
    "text": "19.4 [Bonus Content]\nNote: the content in this section is out of scope.\n\n\n19.4.1 Prediction vs Causation\nThe difference between correlation/prediction vs. causation is best illustrated through examples.\nSome questions about correlation / prediction include:\n\nAre homes with granite countertops worth more money?\nIs college GPA higher for students who win a certain scholarship?\nAre breastfed babies less likely to develop asthma?\nDo cancer patients given some aggressive treatment have a higher 5-year survival rate?\nAre people who smoke more likely to get cancer?\n\nWhile these may sound like causal questions, they are not! Questions about causality are about the effects of interventions (not just passive observation). For example:\n\nHow much do granite countertops raise the value of a house?\nDoes getting the scholarship improve students’ GPAs?\nDoes breastfeeding protect babies against asthma?\nDoes the treatment improve cancer survival?\nDoes smoking cause cancer?\n\nNote, however, that regression coefficients are sometimes called “effects”, which can be deceptive!\nWhen using data alone, predictive questions (i.e., are breastfed babies healthier?) can be answered, but causal questions (i.e., does breastfeeding improve babies’ health?) cannot. The reason for this is that there are many possible causes for our predictive question. For example, possible explanations for why breastfed babies are healthier on average include:\n\nCausal effect: breastfeeding makes babies healthier\nReverse causality: healthier babies more likely to successfully breastfeed\nCommon cause: healthier / richer parents have healthier babies and are more likely to breastfeed\n\nWe cannot tell which explanations are true (or to what extent) just by observing (\\(x\\),\\(y\\)) pairs. Additionally, causal questions implicitly involve counterfactuals, events that didn’t happen. For example, we could ask, would the same breastfed babies have been less healthy if they hadn’t been breastfed? Explanation 1 from above implies they would be, but explanations 2 and 3 do not.\n\n\n19.4.2 Confounders\nLet T represent a treatment (for example, alcohol use) and Y represent an outcome (for example, lung cancer).\n\nA confounder is a variable that affects both T and Y, distorting the correlation between them. Using the example above, rich parents could be a confounder for breastfeeding and a baby’s health. Confounders can be a measured covariate (a feature) or an unmeasured variable we don’t know about, and they generally cause problems, as the relationship between T and Y is affected by data we cannot see. We commonly assume that all confounders are observed (this is also called ignorability).\n\n\n19.4.3 How to perform causal inference?\nIn a randomized experiment, participants are randomly assigned into two groups: treatment and control. A treatment is applied only to the treatment group. We assume ignorability and gather as many measurements as possible so that we can compare them between the control and treatment groups to determine whether or not the treatment has a true effect or is just a confounding factor.\n\nHowever, often, randomly assigning treatments is impractical or unethical. For example, assigning a treatment of cigarettes to test the effect of smoking on the lungs would not only be impractical but also unethical.\nAn alternative to bypass this issue is to utilize observational studies. This can be done by obtaining two participant groups separated based on some identified treatment variable. Unlike randomized experiments, however, we cannot assume ignorability here: the participants could have separated into two groups based on other covariates! In addition, there could also be unmeasured confounders."
  }
]
[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Principles and Techniques of Data Science",
    "section": "",
    "text": "Welcome"
  },
  {
    "objectID": "index.html#about-the-course-notes",
    "href": "index.html#about-the-course-notes",
    "title": "Principles and Techniques of Data Science",
    "section": "About the Course Notes",
    "text": "About the Course Notes\nThis text was developed for the Spring 2023 Edition of the UC Berkeley course Data 100: Principles and Techniques of Data Science.\nIn Spring 2023, we’re creating this all-new set of resources, so notes may be in flux. We appreciate your understanding. If you spot any errors or would like to suggest any changes, please email us.   Email: data100.instructors@berkeley.edu"
  },
  {
    "objectID": "pandas_1/pandas_1.html#introduction-to-exploratory-data-analysis",
    "href": "pandas_1/pandas_1.html#introduction-to-exploratory-data-analysis",
    "title": "2  Pandas I",
    "section": "2.1 Introduction to Exploratory Data Analysis",
    "text": "2.1 Introduction to Exploratory Data Analysis\nImagine you collected, or have been given a box of data. What do you do next?\n\nThe first step is to clean your data. Data cleaning often corrects issues in the structure and formatting of data, including missing values and unit conversions.\nData scientists have coined the term exploratory data analysis (EDA) to describe the process of transforming raw data to insightful observations. EDA is an open-ended analysis of transforming, visualizing, and summarizing patterns in data. In order to conduct EDA, we first need to familiarize ourselves with pandas – an important programming tool."
  },
  {
    "objectID": "pandas_1/pandas_1.html#introduction-to-pandas",
    "href": "pandas_1/pandas_1.html#introduction-to-pandas",
    "title": "2  Pandas I",
    "section": "2.2 Introduction to Pandas",
    "text": "2.2 Introduction to Pandas\npandas is a data analysis library to make data cleaning and analysis fast and convenient in Python.\nThe pandas library adopts many coding idioms from NumPy. The biggest difference is that pandas is designed for working with tabular data, one of the most common data formats (and the focus of Data 100).\nBefore writing any code, we must import pandas into our Python environment.\n\n# `pd` is the conventional alias for Pandas, as `np` is for NumPy\nimport pandas as pd"
  },
  {
    "objectID": "pandas_1/pandas_1.html#series-dataframes-and-indices",
    "href": "pandas_1/pandas_1.html#series-dataframes-and-indices",
    "title": "2  Pandas I",
    "section": "2.3 Series, DataFrames, and Indices",
    "text": "2.3 Series, DataFrames, and Indices\nThere are three fundamental data structures in pandas:\n\nSeries: 1D labeled array data; best thought of as columnar data\nDataFrame: 2D tabular data with rows and columns\nIndex: A sequence of row/column labels\n\nDataFrames, Series, and Indices can be represented visually in the following diagram.\n\nNotice how the DataFrame is a two dimensional object – it contains both rows and columns. The Series above is a singular column of this DataFrame, namely the Candidate column. Both contain an Index, or a shared list of row labels (the integers from 0 to 5, inclusive).\n\n2.3.1 Series\nA Series represents a column of a DataFrame; more generally, it can be any 1-dimensional array-like object containing values of the same type with associated data labels, called its index.\n\nimport pandas as pd\n\ns = pd.Series([-1, 10, 2])\nprint(s)\n\n0    -1\n1    10\n2     2\ndtype: int64\n\n\n\ns.array # Data contained within the Series\n\n<PandasArray>\n[-1, 10, 2]\nLength: 3, dtype: int64\n\n\n\ns.index # The Index of the Series\n\nRangeIndex(start=0, stop=3, step=1)\n\n\nBy default, row indices in pandas are a sequential list of integers beginning from 0. Optionally, a list of desired indices can be passed into the optional index argument.\n\ns = pd.Series([-1, 10, 2], index = [\"a\", \"b\", \"c\"])\nprint(s)\n\na    -1\nb    10\nc     2\ndtype: int64\n\n\nIndices can also be changed after initialization.\n\ns.index = [\"first\", \"second\", \"third\"]\nprint(s)\n\nfirst     -1\nsecond    10\nthird      2\ndtype: int64\n\n\n\n2.3.1.1 Selection in Series\nSimilar to an array, we can select a single value or a set of values from a Series. There are 3 primary methods of selecting data.\n\nA single index label\nA list of index labels\nA filtering condition\n\nLet’s define the following Series ser\n\nser = pd.Series([4, -2, 0, 6], index = [\"a\", \"b\", \"c\", \"d\"])\nprint(ser)\n\na    4\nb   -2\nc    0\nd    6\ndtype: int64\n\n\n\n2.3.1.1.1 A Single Index Label\n\nser[\"a\"] # Notice how the return value is a single array element\n\n4\n\n\n\n\n2.3.1.1.2 A List of Index Labels\n\nser[[\"a\", \"c\"]] # Notice how the return value is another Series\n\na    4\nc    0\ndtype: int64\n\n\n\n\n2.3.1.1.3 A Filtering Condition\nPerhaps the most interesting (and useful) method of selecting data from a Series is with a filtering condition.\nWe first must apply a vectorized boolean operation to our Series that encodes our filter conditon.\n\nser > 0 # Filter condition: select all elements greater than 0\n\na     True\nb    False\nc    False\nd     True\ndtype: bool\n\n\nUpon “indexing” in our Series with this condition, pandas selects only the rows with True values.\n\nser[ser > 0] \n\na    4\nd    6\ndtype: int64\n\n\n\n\n\n\n2.3.2 DataFrames\nIn Data 8, you encountered the Table class of the datascience library, which represented tabular data. In Data 100, we’ll be using the DataFrame class of the pandas library.\nHere is an example of a DataFrame that contains election data.\n\nimport pandas as pd\n\nelections = pd.read_csv(\"data/elections.csv\")\nelections\n\n\n\n\n\n  \n    \n      \n      Year\n      Candidate\n      Party\n      Popular vote\n      Result\n      %\n    \n  \n  \n    \n      0\n      1824\n      Andrew Jackson\n      Democratic-Republican\n      151271\n      loss\n      57.210122\n    \n    \n      1\n      1824\n      John Quincy Adams\n      Democratic-Republican\n      113142\n      win\n      42.789878\n    \n    \n      2\n      1828\n      Andrew Jackson\n      Democratic\n      642806\n      win\n      56.203927\n    \n    \n      3\n      1828\n      John Quincy Adams\n      National Republican\n      500897\n      loss\n      43.796073\n    \n    \n      4\n      1832\n      Andrew Jackson\n      Democratic\n      702735\n      win\n      54.574789\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      177\n      2016\n      Jill Stein\n      Green\n      1457226\n      loss\n      1.073699\n    \n    \n      178\n      2020\n      Joseph Biden\n      Democratic\n      81268924\n      win\n      51.311515\n    \n    \n      179\n      2020\n      Donald Trump\n      Republican\n      74216154\n      loss\n      46.858542\n    \n    \n      180\n      2020\n      Jo Jorgensen\n      Libertarian\n      1865724\n      loss\n      1.177979\n    \n    \n      181\n      2020\n      Howard Hawkins\n      Green\n      405035\n      loss\n      0.255731\n    \n  \n\n182 rows × 6 columns\n\n\n\nLet’s dissect the code above.\n\nWe first import the pandas library into our Python environment, using the alias pd.   import pandas as pd\nThere are a number of ways to read data into a DataFrame. In Data 100, our data are typically stored in a CSV (comma-seperated values) file format. We can import a CSV file into a DataFrame by passing the data path as an argument to the following pandas function.   pd.read_csv(\"elections.csv\")\n\nThis code stores our DataFrame object in the elections variable. Upon inspection, our elections DataFrame has 182 rows and 6 columns (Year, Candidate, Party, Popular Vote, Result, %). Each row represents a single record – in our example, a presedential candidate from some particular year. Each column represents a single attribute, or feature of the record.\nIn the example above, we constructed a DataFrame object using data from a CSV file. As we’ll explore in the next section, we can create a DataFrame with data of our own.\n\n2.3.2.1 Creating a DataFrame\nThere are many ways to create a DataFrame. Here, we will cover the most popular approaches.\n\nUsing a list and column names\nFrom a dictionary\nFrom a Series\n\n\n2.3.2.1.1 Using a List and Column Names\nConsider the following examples.\n\ndf_list = pd.DataFrame([1, 2, 3], columns=[\"Numbers\"])\ndf_list\n\n\n\n\n\n  \n    \n      \n      Numbers\n    \n  \n  \n    \n      0\n      1\n    \n    \n      1\n      2\n    \n    \n      2\n      3\n    \n  \n\n\n\n\nThe first code cell creates a DataFrame with a single column Numbers, while the second creates a DataFrame with an additional column Description. Notice how a 2D list of values is required to initialize the second DataFrame – each nested list represents a single row of data.\n\ndf_list = pd.DataFrame([[1, \"one\"], [2, \"two\"]], columns = [\"Number\", \"Description\"])\ndf_list\n\n\n\n\n\n  \n    \n      \n      Number\n      Description\n    \n  \n  \n    \n      0\n      1\n      one\n    \n    \n      1\n      2\n      two\n    \n  \n\n\n\n\n\n\n2.3.2.1.2 From a Dictionary\nA second (and more common) way to create a DataFrame is with a dictionary. The dictionary keys represent the column names, and the dictionary values represent the column values.\n\ndf_dict = pd.DataFrame({\"Fruit\": [\"Strawberry\", \"Orange\"], \"Price\": [5.49, 3.99]})\ndf_dict\n\n\n\n\n\n  \n    \n      \n      Fruit\n      Price\n    \n  \n  \n    \n      0\n      Strawberry\n      5.49\n    \n    \n      1\n      Orange\n      3.99\n    \n  \n\n\n\n\n\n\n2.3.2.1.3 From a Series\nEarlier, we explained how a Series was synonymous to a column in a DataFrame. It follows then, that a DataFrame is equivalent to a collection of multiple Series, which all share the same index.\nIn fact, we can initialize a DataFrame by merging two or more Series.\n\n# Notice how our indices, or row labels, are the same\n\ns_a = pd.Series([\"a1\", \"a2\", \"a3\"], index = [\"r1\", \"r2\", \"r3\"])\ns_b = pd.Series([\"b1\", \"b2\", \"b3\"], index = [\"r1\", \"r2\", \"r3\"])\n\npd.DataFrame({\"A-column\": s_a, \"B-column\": s_b})\n\n\n\n\n\n  \n    \n      \n      A-column\n      B-column\n    \n  \n  \n    \n      r1\n      a1\n      b1\n    \n    \n      r2\n      a2\n      b2\n    \n    \n      r3\n      a3\n      b3\n    \n  \n\n\n\n\n\n\n\n\n2.3.3 Indices\nThe major takeaway: we can think of a DataFrame as a collection of Series that all share the same Index.\nOn a more technical note, an Index doesn’t have to be an integer, nor does it have to be unique. For example, we can set the index of the elections Dataframe to be the name of presedential candidates. Selecting a new Series from this modified DataFrame yields the following.\n\n# This sets the index to the \"Candidate\" column\nelections.set_index(\"Candidate\", inplace=True)\n\n\nTo retrieve the indices of a DataFrame, simply use the .index attribute of the DataFrame class.\n\nelections.index\n\nIndex(['Andrew Jackson', 'John Quincy Adams', 'Andrew Jackson',\n       'John Quincy Adams', 'Andrew Jackson', 'Henry Clay', 'William Wirt',\n       'Hugh Lawson White', 'Martin Van Buren', 'William Henry Harrison',\n       ...\n       'Darrell Castle', 'Donald Trump', 'Evan McMullin', 'Gary Johnson',\n       'Hillary Clinton', 'Jill Stein', 'Joseph Biden', 'Donald Trump',\n       'Jo Jorgensen', 'Howard Hawkins'],\n      dtype='object', name='Candidate', length=182)\n\n\n\n# This resets the index to be the default list of integers\nelections.reset_index(inplace=True)"
  },
  {
    "objectID": "pandas_1/pandas_1.html#slicing-in-dataframes",
    "href": "pandas_1/pandas_1.html#slicing-in-dataframes",
    "title": "2  Pandas I",
    "section": "2.4 Slicing in DataFrames",
    "text": "2.4 Slicing in DataFrames\nNow that we’ve learned how to create DataFrames, let’s dive deeper into their capabilities.\nThe API (application programming interface) for the DataFrame class is enormous. In this section, we’ll discuss several methods of the DataFrame API that allow us to extract subsets of data.\nThe simplest way to manipulate a DataFrame is to extract a subset of rows and columns, known as slicing. We will do so with three primary methods of the DataFrame class:\n\n.loc\n.iloc\n[]\n\n\n2.4.1 Indexing with .loc\nThe .loc operator selects rows and columns in a DataFrame by their row and column label(s), respectively. The row labels (commonly referred to as the indices) are the bold text on the far left of a DataFrame, while the column labels are the column names found at the top of a DataFrame.\nTo grab data with .loc, we must specify the row and column label(s) where the data exists. The row labels are the first argument to the .loc function; the column labels are the second. For example, we can select the the row labeled 0 and the column labeled Candidate from the elections DataFrame.\n\nelections.loc[0, 'Candidate']\n\n'Andrew Jackson'\n\n\nTo select multiple rows and columns, we can use Python slice notation. Here, we select both the first four rows and columns.\n\nelections.loc[0:3, 'Year':'Popular vote']\n\n\n\n\n\n  \n    \n      \n      Year\n      Party\n      Popular vote\n    \n  \n  \n    \n      0\n      1824\n      Democratic-Republican\n      151271\n    \n    \n      1\n      1824\n      Democratic-Republican\n      113142\n    \n    \n      2\n      1828\n      Democratic\n      642806\n    \n    \n      3\n      1828\n      National Republican\n      500897\n    \n  \n\n\n\n\nSuppose that instead, we wanted every column value for the first four rows in the elections DataFrame. The shorthand : is useful for this.\n\nelections.loc[0:3, :]\n\n\n\n\n\n  \n    \n      \n      Candidate\n      Year\n      Party\n      Popular vote\n      Result\n      %\n    \n  \n  \n    \n      0\n      Andrew Jackson\n      1824\n      Democratic-Republican\n      151271\n      loss\n      57.210122\n    \n    \n      1\n      John Quincy Adams\n      1824\n      Democratic-Republican\n      113142\n      win\n      42.789878\n    \n    \n      2\n      Andrew Jackson\n      1828\n      Democratic\n      642806\n      win\n      56.203927\n    \n    \n      3\n      John Quincy Adams\n      1828\n      National Republican\n      500897\n      loss\n      43.796073\n    \n  \n\n\n\n\nThere are a couple of things we should note. Unlike conventional Python, Pandas allows us to slice string values (in our example, the column labels). Secondly, slicing with .loc is inclusive. Notice how our resulting DataFrame includes every row and column between and including the slice labels we specified.\nEquivalently, we can use a list to obtain multiple rows and columns in our elections DataFrame.\n\nelections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']]\n\n\n\n\n\n  \n    \n      \n      Year\n      Candidate\n      Party\n      Popular vote\n    \n  \n  \n    \n      0\n      1824\n      Andrew Jackson\n      Democratic-Republican\n      151271\n    \n    \n      1\n      1824\n      John Quincy Adams\n      Democratic-Republican\n      113142\n    \n    \n      2\n      1828\n      Andrew Jackson\n      Democratic\n      642806\n    \n    \n      3\n      1828\n      John Quincy Adams\n      National Republican\n      500897\n    \n  \n\n\n\n\nLastly, we can interchange list and slicing notation.\n\nelections.loc[[0, 1, 2, 3], :]\n\n\n\n\n\n  \n    \n      \n      Candidate\n      Year\n      Party\n      Popular vote\n      Result\n      %\n    \n  \n  \n    \n      0\n      Andrew Jackson\n      1824\n      Democratic-Republican\n      151271\n      loss\n      57.210122\n    \n    \n      1\n      John Quincy Adams\n      1824\n      Democratic-Republican\n      113142\n      win\n      42.789878\n    \n    \n      2\n      Andrew Jackson\n      1828\n      Democratic\n      642806\n      win\n      56.203927\n    \n    \n      3\n      John Quincy Adams\n      1828\n      National Republican\n      500897\n      loss\n      43.796073\n    \n  \n\n\n\n\n\n\n2.4.2 Indexing with .iloc\nSlicing with .iloc works similarily to .loc, although .iloc uses the integer positions of rows and columns rather the labels. The arguments to the .iloc function also behave similarly - single values, lists, indices, and any combination of these are permitted.\nLet’s begin reproducing our results from above. We’ll begin by selecting for the first presedential candidate in our elections DataFrame:\n\n# elections.loc[0, \"Candidate\"] - Previous approach\nelections.iloc[0, 1]\n\n1824\n\n\nNotice how the first argument to both .loc and .iloc are the same. This is because the row with a label of 0 is conveniently in the 0th (or first) position of the elections DataFrame. Generally, this is true of any DataFrame where the row labels are incremented in ascending order from 0.\nHowever, when we select for the first four rows and columns using .iloc, we notice something.\n\n# elections.loc[0:3, 'Year':'Popular vote'] - Previous approach\nelections.iloc[0:4, 0:4]\n\n\n\n\n\n  \n    \n      \n      Candidate\n      Year\n      Party\n      Popular vote\n    \n  \n  \n    \n      0\n      Andrew Jackson\n      1824\n      Democratic-Republican\n      151271\n    \n    \n      1\n      John Quincy Adams\n      1824\n      Democratic-Republican\n      113142\n    \n    \n      2\n      Andrew Jackson\n      1828\n      Democratic\n      642806\n    \n    \n      3\n      John Quincy Adams\n      1828\n      National Republican\n      500897\n    \n  \n\n\n\n\nSlicing is no longer inclusive in .iloc - it’s exclusive. This is one of Pandas syntatical subtleties; you’ll get used to with practice.\nList behavior works just as expected.\n\n#elections.loc[[0, 1, 2, 3], ['Year', 'Candidate', 'Party', 'Popular vote']] - Previous Approach\nelections.iloc[[0, 1, 2, 3], [0, 1, 2, 3]]\n\n\n\n\n\n  \n    \n      \n      Candidate\n      Year\n      Party\n      Popular vote\n    \n  \n  \n    \n      0\n      Andrew Jackson\n      1824\n      Democratic-Republican\n      151271\n    \n    \n      1\n      John Quincy Adams\n      1824\n      Democratic-Republican\n      113142\n    \n    \n      2\n      Andrew Jackson\n      1828\n      Democratic\n      642806\n    \n    \n      3\n      John Quincy Adams\n      1828\n      National Republican\n      500897\n    \n  \n\n\n\n\nThis discussion begs the question: when should we use .loc vs .iloc? In most cases, .loc is generally safer to use. You can imagine .iloc may return incorrect values when applied to a dataset where the ordering of data can change.\n\n\n2.4.3 Indexing with []\nThe [] selection operator is the most baffling of all, yet the commonly used. It only takes a single argument, which may be one of the following:\n\nA slice of row numbers\nA list of column labels\nA single column label\n\nThat is, [] is context dependent. Let’s see some examples.\n\n2.4.3.1 A slice of row numbers\nSay we wanted the first four rows of our elections DataFrame.\n\nelections[0:4]\n\n\n\n\n\n  \n    \n      \n      Candidate\n      Year\n      Party\n      Popular vote\n      Result\n      %\n    \n  \n  \n    \n      0\n      Andrew Jackson\n      1824\n      Democratic-Republican\n      151271\n      loss\n      57.210122\n    \n    \n      1\n      John Quincy Adams\n      1824\n      Democratic-Republican\n      113142\n      win\n      42.789878\n    \n    \n      2\n      Andrew Jackson\n      1828\n      Democratic\n      642806\n      win\n      56.203927\n    \n    \n      3\n      John Quincy Adams\n      1828\n      National Republican\n      500897\n      loss\n      43.796073\n    \n  \n\n\n\n\n\n\n2.4.3.2 A list of column labels\nSuppose we now want the first four columns.\n\nelections[[\"Year\", \"Candidate\", \"Party\", \"Popular vote\"]]\n\n\n\n\n\n  \n    \n      \n      Year\n      Candidate\n      Party\n      Popular vote\n    \n  \n  \n    \n      0\n      1824\n      Andrew Jackson\n      Democratic-Republican\n      151271\n    \n    \n      1\n      1824\n      John Quincy Adams\n      Democratic-Republican\n      113142\n    \n    \n      2\n      1828\n      Andrew Jackson\n      Democratic\n      642806\n    \n    \n      3\n      1828\n      John Quincy Adams\n      National Republican\n      500897\n    \n    \n      4\n      1832\n      Andrew Jackson\n      Democratic\n      702735\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      177\n      2016\n      Jill Stein\n      Green\n      1457226\n    \n    \n      178\n      2020\n      Joseph Biden\n      Democratic\n      81268924\n    \n    \n      179\n      2020\n      Donald Trump\n      Republican\n      74216154\n    \n    \n      180\n      2020\n      Jo Jorgensen\n      Libertarian\n      1865724\n    \n    \n      181\n      2020\n      Howard Hawkins\n      Green\n      405035\n    \n  \n\n182 rows × 4 columns\n\n\n\n\n\n2.4.3.3 A single column label\nLastly, if we only want the Candidate column.\n\nelections[\"Candidate\"]\n\n0         Andrew Jackson\n1      John Quincy Adams\n2         Andrew Jackson\n3      John Quincy Adams\n4         Andrew Jackson\n             ...        \n177           Jill Stein\n178         Joseph Biden\n179         Donald Trump\n180         Jo Jorgensen\n181       Howard Hawkins\nName: Candidate, Length: 182, dtype: object\n\n\nThe output looks like a Series! In this course, we’ll become very comfortable with [], especially for selecting for column labels. In practice, [] is much more common in practice than .loc."
  },
  {
    "objectID": "pandas_1/pandas_1.html#parting-note",
    "href": "pandas_1/pandas_1.html#parting-note",
    "title": "2  Pandas I",
    "section": "2.5 Parting Note",
    "text": "2.5 Parting Note\nThe pandas library is enormous and contains many useful functions. Here is a link to documentation.\nThe introductory pandas lectures will cover important data structures and methods you should be fluent in. However, we want you to get familiar with the real world programming practice of …Googling! Answers to your questions can be found in documentation, Stack Overflow, etc.\nWith that, let’s move on to Pandas II."
  }
]